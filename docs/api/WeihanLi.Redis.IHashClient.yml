### YamlMime:ManagedReference
items:
- uid: WeihanLi.Redis.IHashClient
  commentId: T:WeihanLi.Redis.IHashClient
  id: IHashClient
  parent: WeihanLi.Redis
  children:
  - WeihanLi.Redis.IHashClient.Exists(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.ExistsAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Expire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.ExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Get(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Get(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Get``1(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Get``1(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.GetAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.GetAsync(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.GetAsync``1(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.GetAsync``1(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.GetOrSet``1(System.String,StackExchange.Redis.RedisValue,System.Func{``0},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.GetOrSetAsync``1(System.String,StackExchange.Redis.RedisValue,System.Func{System.Threading.Tasks.Task{``0}},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Keys(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.KeysAsync(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Length(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.LengthAsync(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Remove(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.RemoveAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Set``1(System.String,StackExchange.Redis.RedisValue,``0,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Set``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.SetAsync``1(System.String,StackExchange.Redis.RedisValue,``0,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.SetAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.Values``1(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashClient.ValuesAsync``1(System.String,StackExchange.Redis.CommandFlags)
  langs:
  - csharp
  - vb
  name: IHashClient
  nameWithType: IHashClient
  fullName: WeihanLi.Redis.IHashClient
  type: Interface
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: IHashClient
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 8
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: 'public interface IHashClient : IRedisClient'
    content.vb: >-
      Public Interface IHashClient
          Inherits IRedisClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: WeihanLi.Redis.IHashClient.Expire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Expire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  id: Expire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Expire(String, Nullable<TimeSpan>, CommandFlags)
  nameWithType: IHashClient.Expire(String, Nullable<TimeSpan>, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Expire(System.String, System.Nullable<System.TimeSpan>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Expire
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 12
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Expire(string key, TimeSpan? expiresIn, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Expire(key As String, expiresIn As TimeSpan?, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IHashClient.Expire*
  nameWithType.vb: IHashClient.Expire(String, Nullable(Of TimeSpan), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.Expire(System.String, System.Nullable(Of System.TimeSpan), StackExchange.Redis.CommandFlags)
  name.vb: Expire(String, Nullable(Of TimeSpan), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.ExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.ExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  id: ExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: ExpireAsync(String, Nullable<TimeSpan>, CommandFlags)
  nameWithType: IHashClient.ExpireAsync(String, Nullable<TimeSpan>, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.ExpireAsync(System.String, System.Nullable<System.TimeSpan>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ExpireAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 14
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> ExpireAsync(string key, TimeSpan? expiresIn, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function ExpireAsync(key As String, expiresIn As TimeSpan?, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IHashClient.ExpireAsync*
  nameWithType.vb: IHashClient.ExpireAsync(String, Nullable(Of TimeSpan), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.ExpireAsync(System.String, System.Nullable(Of System.TimeSpan), StackExchange.Redis.CommandFlags)
  name.vb: ExpireAsync(String, Nullable(Of TimeSpan), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.Exists(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Exists(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: Exists(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Exists(String, RedisValue, CommandFlags)
  nameWithType: IHashClient.Exists(String, RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Exists(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Exists
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 20
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Exists(string key, RedisValue fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Exists(key As String, fieldName As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IHashClient.Exists*
- uid: WeihanLi.Redis.IHashClient.ExistsAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.ExistsAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: ExistsAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: ExistsAsync(String, RedisValue, CommandFlags)
  nameWithType: IHashClient.ExistsAsync(String, RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.ExistsAsync(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ExistsAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 22
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> ExistsAsync(string key, RedisValue fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function ExistsAsync(key As String, fieldName As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IHashClient.ExistsAsync*
- uid: WeihanLi.Redis.IHashClient.Get(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Get(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: Get(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Get(String, RedisValue, CommandFlags)
  nameWithType: IHashClient.Get(String, RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Get(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Get
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 28
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: string Get(string key, RedisValue fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.String
    content.vb: Function Get(key As String, fieldName As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As String
  overload: WeihanLi.Redis.IHashClient.Get*
- uid: WeihanLi.Redis.IHashClient.GetAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.GetAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: GetAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: GetAsync(String, RedisValue, CommandFlags)
  nameWithType: IHashClient.GetAsync(String, RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.GetAsync(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 30
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<string> GetAsync(string key, RedisValue fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function GetAsync(key As String, fieldName As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of String)
  overload: WeihanLi.Redis.IHashClient.GetAsync*
- uid: WeihanLi.Redis.IHashClient.Get``1(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Get``1(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: Get``1(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Get<T>(String, RedisValue, CommandFlags)
  nameWithType: IHashClient.Get<T>(String, RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Get<T>(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Get
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 32
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: T Get<T>(string key, RedisValue fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function Get(Of T)(key As String, fieldName As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T
  overload: WeihanLi.Redis.IHashClient.Get*
  nameWithType.vb: IHashClient.Get(Of T)(String, RedisValue, CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.Get(Of T)(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  name.vb: Get(Of T)(String, RedisValue, CommandFlags)
- uid: WeihanLi.Redis.IHashClient.GetAsync``1(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.GetAsync``1(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: GetAsync``1(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, RedisValue, CommandFlags)
  nameWithType: IHashClient.GetAsync<T>(String, RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.GetAsync<T>(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 34
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<T> GetAsync<T>(string key, RedisValue fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function GetAsync(Of T)(key As String, fieldName As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T)
  overload: WeihanLi.Redis.IHashClient.GetAsync*
  nameWithType.vb: IHashClient.GetAsync(Of T)(String, RedisValue, CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.GetAsync(Of T)(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  name.vb: GetAsync(Of T)(String, RedisValue, CommandFlags)
- uid: WeihanLi.Redis.IHashClient.Get(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Get(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  id: Get(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Get(String, RedisValue[], CommandFlags)
  nameWithType: IHashClient.Get(String, RedisValue[], CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Get(System.String, StackExchange.Redis.RedisValue[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Get
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 36
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: string[] Get(string key, RedisValue[] fieldNames, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldNames
      type: StackExchange.Redis.RedisValue[]
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.String[]
    content.vb: Function Get(key As String, fieldNames As RedisValue(), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As String()
  overload: WeihanLi.Redis.IHashClient.Get*
  nameWithType.vb: IHashClient.Get(String, RedisValue(), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.Get(System.String, StackExchange.Redis.RedisValue(), StackExchange.Redis.CommandFlags)
  name.vb: Get(String, RedisValue(), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.Get``1(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Get``1(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  id: Get``1(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Get<T>(String, RedisValue[], CommandFlags)
  nameWithType: IHashClient.Get<T>(String, RedisValue[], CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Get<T>(System.String, StackExchange.Redis.RedisValue[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Get
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 38
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: T[] Get<T>(string key, RedisValue[] fieldNames, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldNames
      type: StackExchange.Redis.RedisValue[]
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Function Get(Of T)(key As String, fieldNames As RedisValue(), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T()
  overload: WeihanLi.Redis.IHashClient.Get*
  nameWithType.vb: IHashClient.Get(Of T)(String, RedisValue(), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.Get(Of T)(System.String, StackExchange.Redis.RedisValue(), StackExchange.Redis.CommandFlags)
  name.vb: Get(Of T)(String, RedisValue(), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.GetAsync(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.GetAsync(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  id: GetAsync(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: GetAsync(String, RedisValue[], CommandFlags)
  nameWithType: IHashClient.GetAsync(String, RedisValue[], CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.GetAsync(System.String, StackExchange.Redis.RedisValue[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 40
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<string[]> GetAsync(string key, RedisValue[] fieldNames, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldNames
      type: StackExchange.Redis.RedisValue[]
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.String[]}
    content.vb: Function GetAsync(key As String, fieldNames As RedisValue(), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of String())
  overload: WeihanLi.Redis.IHashClient.GetAsync*
  nameWithType.vb: IHashClient.GetAsync(String, RedisValue(), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.GetAsync(System.String, StackExchange.Redis.RedisValue(), StackExchange.Redis.CommandFlags)
  name.vb: GetAsync(String, RedisValue(), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.GetAsync``1(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.GetAsync``1(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  id: GetAsync``1(System.String,StackExchange.Redis.RedisValue[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, RedisValue[], CommandFlags)
  nameWithType: IHashClient.GetAsync<T>(String, RedisValue[], CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.GetAsync<T>(System.String, StackExchange.Redis.RedisValue[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 42
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<T[]> GetAsync<T>(string key, RedisValue[] fieldNames, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldNames
      type: StackExchange.Redis.RedisValue[]
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}[]}
    content.vb: Function GetAsync(Of T)(key As String, fieldNames As RedisValue(), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T())
  overload: WeihanLi.Redis.IHashClient.GetAsync*
  nameWithType.vb: IHashClient.GetAsync(Of T)(String, RedisValue(), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.GetAsync(Of T)(System.String, StackExchange.Redis.RedisValue(), StackExchange.Redis.CommandFlags)
  name.vb: GetAsync(Of T)(String, RedisValue(), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.Set``1(System.String,StackExchange.Redis.RedisValue,``0,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Set``1(System.String,StackExchange.Redis.RedisValue,``0,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: Set``1(System.String,StackExchange.Redis.RedisValue,``0,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Set<T>(String, RedisValue, T, When, CommandFlags)
  nameWithType: IHashClient.Set<T>(String, RedisValue, T, When, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Set<T>(System.String, StackExchange.Redis.RedisValue, T, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Set
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 48
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Set<T>(string key, RedisValue fieldName, T value, When when = When.Always, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: value
      type: '{T}'
    - id: when
      type: StackExchange.Redis.When
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Function Set(Of T)(key As String, fieldName As RedisValue, value As T, when As  When  =  When.Always, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IHashClient.Set*
  nameWithType.vb: IHashClient.Set(Of T)(String, RedisValue, T, When, CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.Set(Of T)(System.String, StackExchange.Redis.RedisValue, T, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: Set(Of T)(String, RedisValue, T, When, CommandFlags)
- uid: WeihanLi.Redis.IHashClient.Set``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Set``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},StackExchange.Redis.CommandFlags)
  id: Set``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Set<T>(String, IEnumerable<KeyValuePair<String, T>>, CommandFlags)
  nameWithType: IHashClient.Set<T>(String, IEnumerable<KeyValuePair<String, T>>, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Set<T>(System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Set
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 50
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Set<T>(string key, IEnumerable<KeyValuePair<string, T>> entries, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: entries
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{T}}}
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Function Set(Of T)(key As String, entries As IEnumerable(Of KeyValuePair(Of String, T)), commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IHashClient.Set*
  nameWithType.vb: IHashClient.Set(Of T)(String, IEnumerable(Of KeyValuePair(Of String, T)), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.Set(Of T)(System.String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T)), StackExchange.Redis.CommandFlags)
  name.vb: Set(Of T)(String, IEnumerable(Of KeyValuePair(Of String, T)), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.SetAsync``1(System.String,StackExchange.Redis.RedisValue,``0,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.SetAsync``1(System.String,StackExchange.Redis.RedisValue,``0,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: SetAsync``1(System.String,StackExchange.Redis.RedisValue,``0,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: SetAsync<T>(String, RedisValue, T, When, CommandFlags)
  nameWithType: IHashClient.SetAsync<T>(String, RedisValue, T, When, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.SetAsync<T>(System.String, StackExchange.Redis.RedisValue, T, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: SetAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 52
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> SetAsync<T>(string key, RedisValue fieldName, T value, When when = When.Always, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: value
      type: '{T}'
    - id: when
      type: StackExchange.Redis.When
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function SetAsync(Of T)(key As String, fieldName As RedisValue, value As T, when As  When  =  When.Always, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IHashClient.SetAsync*
  nameWithType.vb: IHashClient.SetAsync(Of T)(String, RedisValue, T, When, CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.SetAsync(Of T)(System.String, StackExchange.Redis.RedisValue, T, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: SetAsync(Of T)(String, RedisValue, T, When, CommandFlags)
- uid: WeihanLi.Redis.IHashClient.SetAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.SetAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},StackExchange.Redis.CommandFlags)
  id: SetAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: SetAsync<T>(String, IEnumerable<KeyValuePair<String, T>>, CommandFlags)
  nameWithType: IHashClient.SetAsync<T>(String, IEnumerable<KeyValuePair<String, T>>, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.SetAsync<T>(System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: SetAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 54
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> SetAsync<T>(string key, IEnumerable<KeyValuePair<string, T>> entries, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: entries
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{T}}}
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function SetAsync(Of T)(key As String, entries As IEnumerable(Of KeyValuePair(Of String, T)), commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IHashClient.SetAsync*
  nameWithType.vb: IHashClient.SetAsync(Of T)(String, IEnumerable(Of KeyValuePair(Of String, T)), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.SetAsync(Of T)(System.String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T)), StackExchange.Redis.CommandFlags)
  name.vb: SetAsync(Of T)(String, IEnumerable(Of KeyValuePair(Of String, T)), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.GetOrSet``1(System.String,StackExchange.Redis.RedisValue,System.Func{``0},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.GetOrSet``1(System.String,StackExchange.Redis.RedisValue,System.Func{``0},StackExchange.Redis.CommandFlags)
  id: GetOrSet``1(System.String,StackExchange.Redis.RedisValue,System.Func{``0},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: GetOrSet<T>(String, RedisValue, Func<T>, CommandFlags)
  nameWithType: IHashClient.GetOrSet<T>(String, RedisValue, Func<T>, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.GetOrSet<T>(System.String, StackExchange.Redis.RedisValue, System.Func<T>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetOrSet
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 60
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: T GetOrSet<T>(string key, RedisValue fieldName, Func<T> func, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: func
      type: System.Func{{T}}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function GetOrSet(Of T)(key As String, fieldName As RedisValue, func As Func(Of T), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T
  overload: WeihanLi.Redis.IHashClient.GetOrSet*
  nameWithType.vb: IHashClient.GetOrSet(Of T)(String, RedisValue, Func(Of T), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.GetOrSet(Of T)(System.String, StackExchange.Redis.RedisValue, System.Func(Of T), StackExchange.Redis.CommandFlags)
  name.vb: GetOrSet(Of T)(String, RedisValue, Func(Of T), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.GetOrSetAsync``1(System.String,StackExchange.Redis.RedisValue,System.Func{System.Threading.Tasks.Task{``0}},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.GetOrSetAsync``1(System.String,StackExchange.Redis.RedisValue,System.Func{System.Threading.Tasks.Task{``0}},StackExchange.Redis.CommandFlags)
  id: GetOrSetAsync``1(System.String,StackExchange.Redis.RedisValue,System.Func{System.Threading.Tasks.Task{``0}},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: GetOrSetAsync<T>(String, RedisValue, Func<Task<T>>, CommandFlags)
  nameWithType: IHashClient.GetOrSetAsync<T>(String, RedisValue, Func<Task<T>>, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.GetOrSetAsync<T>(System.String, StackExchange.Redis.RedisValue, System.Func<System.Threading.Tasks.Task<T>>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetOrSetAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 62
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<T> GetOrSetAsync<T>(string key, RedisValue fieldName, Func<Task<T>> func, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: func
      type: System.Func{System.Threading.Tasks.Task{{T}}}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function GetOrSetAsync(Of T)(key As String, fieldName As RedisValue, func As Func(Of Task(Of T)), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T)
  overload: WeihanLi.Redis.IHashClient.GetOrSetAsync*
  nameWithType.vb: IHashClient.GetOrSetAsync(Of T)(String, RedisValue, Func(Of Task(Of T)), CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.GetOrSetAsync(Of T)(System.String, StackExchange.Redis.RedisValue, System.Func(Of System.Threading.Tasks.Task(Of T)), StackExchange.Redis.CommandFlags)
  name.vb: GetOrSetAsync(Of T)(String, RedisValue, Func(Of Task(Of T)), CommandFlags)
- uid: WeihanLi.Redis.IHashClient.Remove(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Remove(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: Remove(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Remove(String, RedisValue, CommandFlags)
  nameWithType: IHashClient.Remove(String, RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Remove(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Remove
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 68
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Remove(string key, RedisValue fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Remove(key As String, fieldName As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IHashClient.Remove*
- uid: WeihanLi.Redis.IHashClient.RemoveAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.RemoveAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: RemoveAsync(System.String,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: RemoveAsync(String, RedisValue, CommandFlags)
  nameWithType: IHashClient.RemoveAsync(String, RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.RemoveAsync(System.String, StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 70
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> RemoveAsync(string key, RedisValue fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: fieldName
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function RemoveAsync(key As String, fieldName As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IHashClient.RemoveAsync*
- uid: WeihanLi.Redis.IHashClient.Keys(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Keys(System.String,StackExchange.Redis.CommandFlags)
  id: Keys(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Keys(String, CommandFlags)
  nameWithType: IHashClient.Keys(String, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Keys(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Keys
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 79
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Returns all field names in the hash stored at key.
  remarks: http://redis.io/commands/hkeys
  example: []
  syntax:
    content: string[] Keys(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.String[]
      description: list of fields in the hash, or an empty list when key does not exist.
    content.vb: Function Keys(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As String()
  overload: WeihanLi.Redis.IHashClient.Keys*
- uid: WeihanLi.Redis.IHashClient.Values``1(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Values``1(System.String,StackExchange.Redis.CommandFlags)
  id: Values``1(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Values<T>(String, CommandFlags)
  nameWithType: IHashClient.Values<T>(String, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Values<T>(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Values
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 84
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Returns all values in the hash stored at key.
  remarks: http://redis.io/commands/hvals
  example: []
  syntax:
    content: T[] Values<T>(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
      description: list of values in the hash, or an empty list when key does not exist.
    content.vb: Function Values(Of T)(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T()
  overload: WeihanLi.Redis.IHashClient.Values*
  nameWithType.vb: IHashClient.Values(Of T)(String, CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.Values(Of T)(System.String, StackExchange.Redis.CommandFlags)
  name.vb: Values(Of T)(String, CommandFlags)
- uid: WeihanLi.Redis.IHashClient.Length(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.Length(System.String,StackExchange.Redis.CommandFlags)
  id: Length(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: Length(String, CommandFlags)
  nameWithType: IHashClient.Length(String, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.Length(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Length
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 91
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the number of fields contained in the hash stored at key.\n"
  remarks: http://redis.io/commands/hlen
  example: []
  syntax:
    content: long Length(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: number of fields in the hash, or 0 when key does not exist.
    content.vb: Function Length(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.IHashClient.Length*
- uid: WeihanLi.Redis.IHashClient.KeysAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.KeysAsync(System.String,StackExchange.Redis.CommandFlags)
  id: KeysAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: KeysAsync(String, CommandFlags)
  nameWithType: IHashClient.KeysAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.KeysAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeysAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 96
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Returns all field names in the hash stored at key.
  remarks: http://redis.io/commands/hkeys
  example: []
  syntax:
    content: Task<string[]> KeysAsync(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: list of fields in the hash, or an empty list when key does not exist.
    content.vb: Function KeysAsync(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of String())
  overload: WeihanLi.Redis.IHashClient.KeysAsync*
- uid: WeihanLi.Redis.IHashClient.LengthAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.LengthAsync(System.String,StackExchange.Redis.CommandFlags)
  id: LengthAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: LengthAsync(String, CommandFlags)
  nameWithType: IHashClient.LengthAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.LengthAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: LengthAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 103
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the number of fields contained in the hash stored at key.\n"
  remarks: http://redis.io/commands/hlen
  example: []
  syntax:
    content: Task<long> LengthAsync(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: number of fields in the hash, or 0 when key does not exist.
    content.vb: Function LengthAsync(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.IHashClient.LengthAsync*
- uid: WeihanLi.Redis.IHashClient.ValuesAsync``1(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashClient.ValuesAsync``1(System.String,StackExchange.Redis.CommandFlags)
  id: ValuesAsync``1(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashClient
  langs:
  - csharp
  - vb
  name: ValuesAsync<T>(String, CommandFlags)
  nameWithType: IHashClient.ValuesAsync<T>(String, CommandFlags)
  fullName: WeihanLi.Redis.IHashClient.ValuesAsync<T>(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ValuesAsync
    path: src/WeihanLi.Redis/Hash/IHashClient.cs
    startLine: 108
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Returns all values in the hash stored at key.
  remarks: http://redis.io/commands/hvals
  example: []
  syntax:
    content: Task<T[]> ValuesAsync<T>(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}[]}
      description: list of values in the hash, or an empty list when key does not exist.
    content.vb: Function ValuesAsync(Of T)(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T())
  overload: WeihanLi.Redis.IHashClient.ValuesAsync*
  nameWithType.vb: IHashClient.ValuesAsync(Of T)(String, CommandFlags)
  fullName.vb: WeihanLi.Redis.IHashClient.ValuesAsync(Of T)(System.String, StackExchange.Redis.CommandFlags)
  name.vb: ValuesAsync(Of T)(String, CommandFlags)
references:
- uid: WeihanLi.Redis
  commentId: N:WeihanLi.Redis
  name: WeihanLi.Redis
  nameWithType: WeihanLi.Redis
  fullName: WeihanLi.Redis
- uid: WeihanLi.Redis.IHashClient.Expire*
  commentId: Overload:WeihanLi.Redis.IHashClient.Expire
  name: Expire
  nameWithType: IHashClient.Expire
  fullName: WeihanLi.Redis.IHashClient.Expire
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: StackExchange.Redis.CommandFlags
  commentId: T:StackExchange.Redis.CommandFlags
  parent: StackExchange.Redis
  isExternal: true
  name: CommandFlags
  nameWithType: CommandFlags
  fullName: StackExchange.Redis.CommandFlags
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: StackExchange.Redis
  commentId: N:StackExchange.Redis
  isExternal: true
  name: StackExchange.Redis
  nameWithType: StackExchange.Redis
  fullName: StackExchange.Redis
- uid: WeihanLi.Redis.IHashClient.ExpireAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.ExpireAsync
  name: ExpireAsync
  nameWithType: IHashClient.ExpireAsync
  fullName: WeihanLi.Redis.IHashClient.ExpireAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: WeihanLi.Redis.IHashClient.Exists*
  commentId: Overload:WeihanLi.Redis.IHashClient.Exists
  name: Exists
  nameWithType: IHashClient.Exists
  fullName: WeihanLi.Redis.IHashClient.Exists
- uid: StackExchange.Redis.RedisValue
  commentId: T:StackExchange.Redis.RedisValue
  parent: StackExchange.Redis
  isExternal: true
  name: RedisValue
  nameWithType: RedisValue
  fullName: StackExchange.Redis.RedisValue
- uid: WeihanLi.Redis.IHashClient.ExistsAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.ExistsAsync
  name: ExistsAsync
  nameWithType: IHashClient.ExistsAsync
  fullName: WeihanLi.Redis.IHashClient.ExistsAsync
- uid: WeihanLi.Redis.IHashClient.Get*
  commentId: Overload:WeihanLi.Redis.IHashClient.Get
  name: Get
  nameWithType: IHashClient.Get
  fullName: WeihanLi.Redis.IHashClient.Get
- uid: WeihanLi.Redis.IHashClient.GetAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.GetAsync
  name: GetAsync
  nameWithType: IHashClient.GetAsync
  fullName: WeihanLi.Redis.IHashClient.GetAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: StackExchange.Redis.RedisValue[]
  isExternal: true
  name: RedisValue[]
  nameWithType: RedisValue[]
  fullName: StackExchange.Redis.RedisValue[]
  nameWithType.vb: RedisValue()
  fullName.vb: StackExchange.Redis.RedisValue()
  name.vb: RedisValue()
  spec.csharp:
  - uid: StackExchange.Redis.RedisValue
    name: RedisValue
    nameWithType: RedisValue
    fullName: StackExchange.Redis.RedisValue
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: StackExchange.Redis.RedisValue
    name: RedisValue
    nameWithType: RedisValue
    fullName: StackExchange.Redis.RedisValue
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: T:System.Threading.Tasks.Task{System.String[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String[]>
  nameWithType: Task<String[]>
  fullName: System.Threading.Tasks.Task<System.String[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of System.String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{T}[]}
  commentId: T:System.Threading.Tasks.Task{``0[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T[]>
  nameWithType: Task<T[]>
  fullName: System.Threading.Tasks.Task<T[]>
  nameWithType.vb: Task(Of T())
  fullName.vb: System.Threading.Tasks.Task(Of T())
  name.vb: Task(Of T())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IHashClient.Set*
  commentId: Overload:WeihanLi.Redis.IHashClient.Set
  name: Set
  nameWithType: IHashClient.Set
  fullName: WeihanLi.Redis.IHashClient.Set
- uid: StackExchange.Redis.When
  commentId: T:StackExchange.Redis.When
  parent: StackExchange.Redis
  isExternal: true
  name: When
  nameWithType: When
  fullName: StackExchange.Redis.When
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, T>>
  nameWithType: IEnumerable<KeyValuePair<String, T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T))
  name.vb: IEnumerable(Of KeyValuePair(Of String, T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: WeihanLi.Redis.IHashClient.SetAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.SetAsync
  name: SetAsync
  nameWithType: IHashClient.SetAsync
  fullName: WeihanLi.Redis.IHashClient.SetAsync
- uid: WeihanLi.Redis.IHashClient.GetOrSet*
  commentId: Overload:WeihanLi.Redis.IHashClient.GetOrSet
  name: GetOrSet
  nameWithType: IHashClient.GetOrSet
  fullName: WeihanLi.Redis.IHashClient.GetOrSet
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IHashClient.GetOrSetAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.GetOrSetAsync
  name: GetOrSetAsync
  nameWithType: IHashClient.GetOrSetAsync
  fullName: WeihanLi.Redis.IHashClient.GetOrSetAsync
- uid: System.Func{System.Threading.Tasks.Task{{T}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  name: Func<Task<T>>
  nameWithType: Func<Task<T>>
  fullName: System.Func<System.Threading.Tasks.Task<T>>
  nameWithType.vb: Func(Of Task(Of T))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of T))
  name.vb: Func(Of Task(Of T))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IHashClient.Remove*
  commentId: Overload:WeihanLi.Redis.IHashClient.Remove
  name: Remove
  nameWithType: IHashClient.Remove
  fullName: WeihanLi.Redis.IHashClient.Remove
- uid: WeihanLi.Redis.IHashClient.RemoveAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.RemoveAsync
  name: RemoveAsync
  nameWithType: IHashClient.RemoveAsync
  fullName: WeihanLi.Redis.IHashClient.RemoveAsync
- uid: WeihanLi.Redis.IHashClient.Keys*
  commentId: Overload:WeihanLi.Redis.IHashClient.Keys
  name: Keys
  nameWithType: IHashClient.Keys
  fullName: WeihanLi.Redis.IHashClient.Keys
- uid: WeihanLi.Redis.IHashClient.Values*
  commentId: Overload:WeihanLi.Redis.IHashClient.Values
  name: Values
  nameWithType: IHashClient.Values
  fullName: WeihanLi.Redis.IHashClient.Values
- uid: WeihanLi.Redis.IHashClient.Length*
  commentId: Overload:WeihanLi.Redis.IHashClient.Length
  name: Length
  nameWithType: IHashClient.Length
  fullName: WeihanLi.Redis.IHashClient.Length
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: WeihanLi.Redis.IHashClient.KeysAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.KeysAsync
  name: KeysAsync
  nameWithType: IHashClient.KeysAsync
  fullName: WeihanLi.Redis.IHashClient.KeysAsync
- uid: WeihanLi.Redis.IHashClient.LengthAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.LengthAsync
  name: LengthAsync
  nameWithType: IHashClient.LengthAsync
  fullName: WeihanLi.Redis.IHashClient.LengthAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IHashClient.ValuesAsync*
  commentId: Overload:WeihanLi.Redis.IHashClient.ValuesAsync
  name: ValuesAsync
  nameWithType: IHashClient.ValuesAsync
  fullName: WeihanLi.Redis.IHashClient.ValuesAsync
