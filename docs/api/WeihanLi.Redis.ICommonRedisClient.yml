### YamlMime:ManagedReference
items:
- uid: WeihanLi.Redis.ICommonRedisClient
  commentId: T:WeihanLi.Redis.ICommonRedisClient
  id: ICommonRedisClient
  parent: WeihanLi.Redis
  children:
  - WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyExists(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyExistsAsync(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String,System.Nullable{System.DateTime},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String,System.Nullable{System.DateTime},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyPersist(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyPersistAsync(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyTimeToLive(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.KeyType(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate``1(System.String,System.String[],``0[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync``1(System.String,System.String[],``0[],StackExchange.Redis.CommandFlags)
  langs:
  - csharp
  - vb
  name: ICommonRedisClient
  nameWithType: ICommonRedisClient
  fullName: WeihanLi.Redis.ICommonRedisClient
  type: Interface
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ICommonRedisClient
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 7
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: 'public interface ICommonRedisClient : IRedisClient'
    content.vb: >-
      Public Interface ICommonRedisClient
          Inherits IRedisClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExists(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyExists(System.String,StackExchange.Redis.CommandFlags)
  id: KeyExists(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyExists(String, CommandFlags)
  nameWithType: ICommonRedisClient.KeyExists(String, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExists(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyExists
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 11
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool KeyExists(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function KeyExists(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICommonRedisClient.KeyExists*
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExistsAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyExistsAsync(System.String,StackExchange.Redis.CommandFlags)
  id: KeyExistsAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyExistsAsync(String, CommandFlags)
  nameWithType: ICommonRedisClient.KeyExistsAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExistsAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyExistsAsync
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 13
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> KeyExistsAsync(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function KeyExistsAsync(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICommonRedisClient.KeyExistsAsync*
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  id: KeyExpire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyExpire(String, Nullable<TimeSpan>, CommandFlags)
  nameWithType: ICommonRedisClient.KeyExpire(String, Nullable<TimeSpan>, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String, System.Nullable<System.TimeSpan>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyExpire
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 19
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool KeyExpire(string key, TimeSpan? expiresIn, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function KeyExpire(key As String, expiresIn As TimeSpan?, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICommonRedisClient.KeyExpire*
  nameWithType.vb: ICommonRedisClient.KeyExpire(String, Nullable(Of TimeSpan), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String, System.Nullable(Of System.TimeSpan), StackExchange.Redis.CommandFlags)
  name.vb: KeyExpire(String, Nullable(Of TimeSpan), CommandFlags)
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String,System.Nullable{System.DateTime},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String,System.Nullable{System.DateTime},StackExchange.Redis.CommandFlags)
  id: KeyExpire(System.String,System.Nullable{System.DateTime},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyExpire(String, Nullable<DateTime>, CommandFlags)
  nameWithType: ICommonRedisClient.KeyExpire(String, Nullable<DateTime>, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String, System.Nullable<System.DateTime>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyExpire
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 21
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool KeyExpire(string key, DateTime? expiry, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: expiry
      type: System.Nullable{System.DateTime}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function KeyExpire(key As String, expiry As Date?, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICommonRedisClient.KeyExpire*
  nameWithType.vb: ICommonRedisClient.KeyExpire(String, Nullable(Of DateTime), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICommonRedisClient.KeyExpire(System.String, System.Nullable(Of System.DateTime), StackExchange.Redis.CommandFlags)
  name.vb: KeyExpire(String, Nullable(Of DateTime), CommandFlags)
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  id: KeyExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyExpireAsync(String, Nullable<TimeSpan>, CommandFlags)
  nameWithType: ICommonRedisClient.KeyExpireAsync(String, Nullable<TimeSpan>, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String, System.Nullable<System.TimeSpan>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyExpireAsync
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 23
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> KeyExpireAsync(string key, TimeSpan? expiresIn, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function KeyExpireAsync(key As String, expiresIn As TimeSpan?, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync*
  nameWithType.vb: ICommonRedisClient.KeyExpireAsync(String, Nullable(Of TimeSpan), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String, System.Nullable(Of System.TimeSpan), StackExchange.Redis.CommandFlags)
  name.vb: KeyExpireAsync(String, Nullable(Of TimeSpan), CommandFlags)
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String,System.Nullable{System.DateTime},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String,System.Nullable{System.DateTime},StackExchange.Redis.CommandFlags)
  id: KeyExpireAsync(System.String,System.Nullable{System.DateTime},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyExpireAsync(String, Nullable<DateTime>, CommandFlags)
  nameWithType: ICommonRedisClient.KeyExpireAsync(String, Nullable<DateTime>, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String, System.Nullable<System.DateTime>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyExpireAsync
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 25
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> KeyExpireAsync(string key, DateTime? expiry, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: expiry
      type: System.Nullable{System.DateTime}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function KeyExpireAsync(key As String, expiry As Date?, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync*
  nameWithType.vb: ICommonRedisClient.KeyExpireAsync(String, Nullable(Of DateTime), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync(System.String, System.Nullable(Of System.DateTime), StackExchange.Redis.CommandFlags)
  name.vb: KeyExpireAsync(String, Nullable(Of DateTime), CommandFlags)
- uid: WeihanLi.Redis.ICommonRedisClient.KeyPersist(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyPersist(System.String,StackExchange.Redis.CommandFlags)
  id: KeyPersist(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyPersist(String, CommandFlags)
  nameWithType: ICommonRedisClient.KeyPersist(String, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyPersist(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyPersist
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 31
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool KeyPersist(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function KeyPersist(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICommonRedisClient.KeyPersist*
- uid: WeihanLi.Redis.ICommonRedisClient.KeyPersistAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyPersistAsync(System.String,StackExchange.Redis.CommandFlags)
  id: KeyPersistAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyPersistAsync(String, CommandFlags)
  nameWithType: ICommonRedisClient.KeyPersistAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyPersistAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyPersistAsync
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 33
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> KeyPersistAsync(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function KeyPersistAsync(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICommonRedisClient.KeyPersistAsync*
- uid: WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String,StackExchange.Redis.CommandFlags)
  id: KeyDelete(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyDelete(String, CommandFlags)
  nameWithType: ICommonRedisClient.KeyDelete(String, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyDelete
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 39
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool KeyDelete(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function KeyDelete(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICommonRedisClient.KeyDelete*
- uid: WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String[],StackExchange.Redis.CommandFlags)
  id: KeyDelete(System.String[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyDelete(String[], CommandFlags)
  nameWithType: ICommonRedisClient.KeyDelete(String[], CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyDelete
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 41
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: long KeyDelete(string[] keys, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: keys
      type: System.String[]
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
    content.vb: Function KeyDelete(keys As String(), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ICommonRedisClient.KeyDelete*
  nameWithType.vb: ICommonRedisClient.KeyDelete(String(), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICommonRedisClient.KeyDelete(System.String(), StackExchange.Redis.CommandFlags)
  name.vb: KeyDelete(String(), CommandFlags)
- uid: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String,StackExchange.Redis.CommandFlags)
  id: KeyDeleteAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyDeleteAsync(String, CommandFlags)
  nameWithType: ICommonRedisClient.KeyDeleteAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyDeleteAsync
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 43
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> KeyDeleteAsync(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function KeyDeleteAsync(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync*
- uid: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String[],StackExchange.Redis.CommandFlags)
  id: KeyDeleteAsync(System.String[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyDeleteAsync(String[], CommandFlags)
  nameWithType: ICommonRedisClient.KeyDeleteAsync(String[], CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyDeleteAsync
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 45
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<long> KeyDeleteAsync(string[] keys, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: keys
      type: System.String[]
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Function KeyDeleteAsync(keys As String(), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync*
  nameWithType.vb: ICommonRedisClient.KeyDeleteAsync(String(), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync(System.String(), StackExchange.Redis.CommandFlags)
  name.vb: KeyDeleteAsync(String(), CommandFlags)
- uid: WeihanLi.Redis.ICommonRedisClient.KeyTimeToLive(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyTimeToLive(System.String,StackExchange.Redis.CommandFlags)
  id: KeyTimeToLive(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyTimeToLive(String, CommandFlags)
  nameWithType: ICommonRedisClient.KeyTimeToLive(String, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyTimeToLive(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyTimeToLive
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 56
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the remaining time to live of a key that has a timeout.  This introspection capability allows a Redis client to check how many seconds a given key will continue to be part of the dataset.\n"
  remarks: http://redis.io/commands/ttl
  example: []
  syntax:
    content: TimeSpan? KeyTimeToLive(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Nullable{System.TimeSpan}
      description: TTL, or nil when key does not exist or does not have a timeout.
    content.vb: Function KeyTimeToLive(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As TimeSpan?
  overload: WeihanLi.Redis.ICommonRedisClient.KeyTimeToLive*
- uid: WeihanLi.Redis.ICommonRedisClient.KeyType(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.KeyType(System.String,StackExchange.Redis.CommandFlags)
  id: KeyType(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: KeyType(String, CommandFlags)
  nameWithType: ICommonRedisClient.KeyType(String, CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyType(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeyType
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 67
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the string representation of the type of the value stored at key. The different types that can be returned are: string, list, set, zset and hash.\n"
  remarks: http://redis.io/commands/type
  example: []
  syntax:
    content: RedisType KeyType(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: StackExchange.Redis.RedisType
      description: type of key, or none when key does not exist.
    content.vb: Function KeyType(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As RedisType
  overload: WeihanLi.Redis.ICommonRedisClient.KeyType*
- uid: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate``1(System.String,System.String[],``0[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate``1(System.String,System.String[],``0[],StackExchange.Redis.CommandFlags)
  id: ScriptEvaluate``1(System.String,System.String[],``0[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: ScriptEvaluate<TValue>(String, String[], TValue[], CommandFlags)
  nameWithType: ICommonRedisClient.ScriptEvaluate<TValue>(String, String[], TValue[], CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate<TValue>(System.String, System.String[], TValue[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ScriptEvaluate
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 73
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: RedisResult ScriptEvaluate<TValue>(string script, string[] keys = null, TValue[] values = null, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: script
      type: System.String
    - id: keys
      type: System.String[]
    - id: values
      type: '{TValue}[]'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: TValue
    return:
      type: StackExchange.Redis.RedisResult
    content.vb: Function ScriptEvaluate(Of TValue)(script As String, keys As String() = Nothing, values As TValue() = Nothing, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As RedisResult
  overload: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate*
  nameWithType.vb: ICommonRedisClient.ScriptEvaluate(Of TValue)(String, String(), TValue(), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate(Of TValue)(System.String, System.String(), TValue(), StackExchange.Redis.CommandFlags)
  name.vb: ScriptEvaluate(Of TValue)(String, String(), TValue(), CommandFlags)
- uid: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync``1(System.String,System.String[],``0[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync``1(System.String,System.String[],``0[],StackExchange.Redis.CommandFlags)
  id: ScriptEvaluateAsync``1(System.String,System.String[],``0[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICommonRedisClient
  langs:
  - csharp
  - vb
  name: ScriptEvaluateAsync<TValue>(String, String[], TValue[], CommandFlags)
  nameWithType: ICommonRedisClient.ScriptEvaluateAsync<TValue>(String, String[], TValue[], CommandFlags)
  fullName: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync<TValue>(System.String, System.String[], TValue[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ScriptEvaluateAsync
    path: src/WeihanLi.Redis/Common/ICommonRedisClient.cs
    startLine: 76
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<RedisResult> ScriptEvaluateAsync<TValue>(string script, string[] keys = null, TValue[] values = null, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: script
      type: System.String
    - id: keys
      type: System.String[]
    - id: values
      type: '{TValue}[]'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: TValue
    return:
      type: System.Threading.Tasks.Task{StackExchange.Redis.RedisResult}
    content.vb: Function ScriptEvaluateAsync(Of TValue)(script As String, keys As String() = Nothing, values As TValue() = Nothing, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of RedisResult)
  overload: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync*
  nameWithType.vb: ICommonRedisClient.ScriptEvaluateAsync(Of TValue)(String, String(), TValue(), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync(Of TValue)(System.String, System.String(), TValue(), StackExchange.Redis.CommandFlags)
  name.vb: ScriptEvaluateAsync(Of TValue)(String, String(), TValue(), CommandFlags)
references:
- uid: WeihanLi.Redis
  commentId: N:WeihanLi.Redis
  name: WeihanLi.Redis
  nameWithType: WeihanLi.Redis
  fullName: WeihanLi.Redis
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExists*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyExists
  name: KeyExists
  nameWithType: ICommonRedisClient.KeyExists
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExists
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: StackExchange.Redis.CommandFlags
  commentId: T:StackExchange.Redis.CommandFlags
  parent: StackExchange.Redis
  isExternal: true
  name: CommandFlags
  nameWithType: CommandFlags
  fullName: StackExchange.Redis.CommandFlags
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: StackExchange.Redis
  commentId: N:StackExchange.Redis
  isExternal: true
  name: StackExchange.Redis
  nameWithType: StackExchange.Redis
  fullName: StackExchange.Redis
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExistsAsync*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyExistsAsync
  name: KeyExistsAsync
  nameWithType: ICommonRedisClient.KeyExistsAsync
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExpire*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyExpire
  name: KeyExpire
  nameWithType: ICommonRedisClient.KeyExpire
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExpire
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync
  name: KeyExpireAsync
  nameWithType: ICommonRedisClient.KeyExpireAsync
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyExpireAsync
- uid: WeihanLi.Redis.ICommonRedisClient.KeyPersist*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyPersist
  name: KeyPersist
  nameWithType: ICommonRedisClient.KeyPersist
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyPersist
- uid: WeihanLi.Redis.ICommonRedisClient.KeyPersistAsync*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyPersistAsync
  name: KeyPersistAsync
  nameWithType: ICommonRedisClient.KeyPersistAsync
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyPersistAsync
- uid: WeihanLi.Redis.ICommonRedisClient.KeyDelete*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyDelete
  name: KeyDelete
  nameWithType: ICommonRedisClient.KeyDelete
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyDelete
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync
  name: KeyDeleteAsync
  nameWithType: ICommonRedisClient.KeyDeleteAsync
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyDeleteAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ICommonRedisClient.KeyTimeToLive*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyTimeToLive
  name: KeyTimeToLive
  nameWithType: ICommonRedisClient.KeyTimeToLive
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyTimeToLive
- uid: WeihanLi.Redis.ICommonRedisClient.KeyType*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.KeyType
  name: KeyType
  nameWithType: ICommonRedisClient.KeyType
  fullName: WeihanLi.Redis.ICommonRedisClient.KeyType
- uid: StackExchange.Redis.RedisType
  commentId: T:StackExchange.Redis.RedisType
  parent: StackExchange.Redis
  isExternal: true
  name: RedisType
  nameWithType: RedisType
  fullName: StackExchange.Redis.RedisType
- uid: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate
  name: ScriptEvaluate
  nameWithType: ICommonRedisClient.ScriptEvaluate
  fullName: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluate
- uid: '{TValue}[]'
  isExternal: true
  name: TValue[]
  nameWithType: TValue[]
  fullName: TValue[]
  nameWithType.vb: TValue()
  fullName.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: StackExchange.Redis.RedisResult
  commentId: T:StackExchange.Redis.RedisResult
  parent: StackExchange.Redis
  isExternal: true
  name: RedisResult
  nameWithType: RedisResult
  fullName: StackExchange.Redis.RedisResult
- uid: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync*
  commentId: Overload:WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync
  name: ScriptEvaluateAsync
  nameWithType: ICommonRedisClient.ScriptEvaluateAsync
  fullName: WeihanLi.Redis.ICommonRedisClient.ScriptEvaluateAsync
- uid: System.Threading.Tasks.Task{StackExchange.Redis.RedisResult}
  commentId: T:System.Threading.Tasks.Task{StackExchange.Redis.RedisResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RedisResult>
  nameWithType: Task<RedisResult>
  fullName: System.Threading.Tasks.Task<StackExchange.Redis.RedisResult>
  nameWithType.vb: Task(Of RedisResult)
  fullName.vb: System.Threading.Tasks.Task(Of StackExchange.Redis.RedisResult)
  name.vb: Task(Of RedisResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: StackExchange.Redis.RedisResult
    name: RedisResult
    nameWithType: RedisResult
    fullName: StackExchange.Redis.RedisResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: StackExchange.Redis.RedisResult
    name: RedisResult
    nameWithType: RedisResult
    fullName: StackExchange.Redis.RedisResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
