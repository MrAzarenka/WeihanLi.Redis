### YamlMime:ManagedReference
items:
- uid: WeihanLi.Redis.IPubSubClient
  commentId: T:WeihanLi.Redis.IPubSubClient
  id: IPubSubClient
  parent: WeihanLi.Redis
  children:
  - WeihanLi.Redis.IPubSubClient.IsConnected(System.String)
  - WeihanLi.Redis.IPubSubClient.Publish(System.String,WeihanLi.Redis.IPubSubMessage,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IPubSubClient.PublishAsync(System.String,WeihanLi.Redis.IPubSubMessage,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IPubSubClient.Subscribe(System.String,System.Action{WeihanLi.Redis.IPubSubMessage},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IPubSubClient.SubscribeAsync(System.String,System.Action{WeihanLi.Redis.IPubSubMessage},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IPubSubClient.Unsubscribe(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IPubSubClient.UnsubscribeAll(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IPubSubClient.UnsubscribeAllAsync(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IPubSubClient.UnsubscribeAsync(System.String,StackExchange.Redis.CommandFlags)
  langs:
  - csharp
  - vb
  name: IPubSubClient
  nameWithType: IPubSubClient
  fullName: WeihanLi.Redis.IPubSubClient
  type: Interface
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: IPubSubClient
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 7
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: 'public interface IPubSubClient : IRedisClient'
    content.vb: >-
      Public Interface IPubSubClient
          Inherits IRedisClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: WeihanLi.Redis.IPubSubClient.IsConnected(System.String)
  commentId: M:WeihanLi.Redis.IPubSubClient.IsConnected(System.String)
  id: IsConnected(System.String)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: IsConnected(String)
  nameWithType: IPubSubClient.IsConnected(String)
  fullName: WeihanLi.Redis.IPubSubClient.IsConnected(System.String)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: IsConnected
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 15
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nIndicates whether the instance can communicate with the server;\nif a channel is specified, the existing subscription map is queried to\nresolve the server responsible for that subscription - otherwise the\nserver is chosen aribtraily from the masters.\n"
  example: []
  syntax:
    content: bool IsConnected(string channelName = null)
    parameters:
    - id: channelName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsConnected(channelName As String = Nothing) As Boolean
  overload: WeihanLi.Redis.IPubSubClient.IsConnected*
- uid: WeihanLi.Redis.IPubSubClient.Publish(System.String,WeihanLi.Redis.IPubSubMessage,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IPubSubClient.Publish(System.String,WeihanLi.Redis.IPubSubMessage,StackExchange.Redis.CommandFlags)
  id: Publish(System.String,WeihanLi.Redis.IPubSubMessage,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: Publish(String, IPubSubMessage, CommandFlags)
  nameWithType: IPubSubClient.Publish(String, IPubSubMessage, CommandFlags)
  fullName: WeihanLi.Redis.IPubSubClient.Publish(System.String, WeihanLi.Redis.IPubSubMessage, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Publish
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 20
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Posts a message to the given channel.
  remarks: http://redis.io/commands/publish
  example: []
  syntax:
    content: long Publish(string channelName, IPubSubMessage message, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: channelName
      type: System.String
    - id: message
      type: WeihanLi.Redis.IPubSubMessage
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: the number of clients that received the message.
    content.vb: Function Publish(channelName As String, message As IPubSubMessage, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.IPubSubClient.Publish*
- uid: WeihanLi.Redis.IPubSubClient.PublishAsync(System.String,WeihanLi.Redis.IPubSubMessage,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IPubSubClient.PublishAsync(System.String,WeihanLi.Redis.IPubSubMessage,StackExchange.Redis.CommandFlags)
  id: PublishAsync(System.String,WeihanLi.Redis.IPubSubMessage,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: PublishAsync(String, IPubSubMessage, CommandFlags)
  nameWithType: IPubSubClient.PublishAsync(String, IPubSubMessage, CommandFlags)
  fullName: WeihanLi.Redis.IPubSubClient.PublishAsync(System.String, WeihanLi.Redis.IPubSubMessage, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: PublishAsync
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 25
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Posts a message to the given channel.
  remarks: http://redis.io/commands/publish
  example: []
  syntax:
    content: Task<long> PublishAsync(string channelName, IPubSubMessage message, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: channelName
      type: System.String
    - id: message
      type: WeihanLi.Redis.IPubSubMessage
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: the number of clients that received the message.
    content.vb: Function PublishAsync(channelName As String, message As IPubSubMessage, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.IPubSubClient.PublishAsync*
- uid: WeihanLi.Redis.IPubSubClient.Subscribe(System.String,System.Action{WeihanLi.Redis.IPubSubMessage},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IPubSubClient.Subscribe(System.String,System.Action{WeihanLi.Redis.IPubSubMessage},StackExchange.Redis.CommandFlags)
  id: Subscribe(System.String,System.Action{WeihanLi.Redis.IPubSubMessage},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: Subscribe(String, Action<IPubSubMessage>, CommandFlags)
  nameWithType: IPubSubClient.Subscribe(String, Action<IPubSubMessage>, CommandFlags)
  fullName: WeihanLi.Redis.IPubSubClient.Subscribe(System.String, System.Action<WeihanLi.Redis.IPubSubMessage>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Subscribe
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 32
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nSubscribe to perform some operation when a change to the preferred/active node is broadcast.\n"
  remarks: http://redis.io/commands/subscribe
  example: []
  syntax:
    content: void Subscribe(string channelName, Action<IPubSubMessage> action, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: channelName
      type: System.String
    - id: action
      type: System.Action{WeihanLi.Redis.IPubSubMessage}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    content.vb: Sub Subscribe(channelName As String, action As Action(Of IPubSubMessage), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster)
  overload: WeihanLi.Redis.IPubSubClient.Subscribe*
  nameWithType.vb: IPubSubClient.Subscribe(String, Action(Of IPubSubMessage), CommandFlags)
  fullName.vb: WeihanLi.Redis.IPubSubClient.Subscribe(System.String, System.Action(Of WeihanLi.Redis.IPubSubMessage), StackExchange.Redis.CommandFlags)
  name.vb: Subscribe(String, Action(Of IPubSubMessage), CommandFlags)
- uid: WeihanLi.Redis.IPubSubClient.SubscribeAsync(System.String,System.Action{WeihanLi.Redis.IPubSubMessage},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IPubSubClient.SubscribeAsync(System.String,System.Action{WeihanLi.Redis.IPubSubMessage},StackExchange.Redis.CommandFlags)
  id: SubscribeAsync(System.String,System.Action{WeihanLi.Redis.IPubSubMessage},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: SubscribeAsync(String, Action<IPubSubMessage>, CommandFlags)
  nameWithType: IPubSubClient.SubscribeAsync(String, Action<IPubSubMessage>, CommandFlags)
  fullName: WeihanLi.Redis.IPubSubClient.SubscribeAsync(System.String, System.Action<WeihanLi.Redis.IPubSubMessage>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: SubscribeAsync
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 39
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nSubscribe to perform some operation when a change to the preferred/active node is broadcast.\n"
  remarks: http://redis.io/commands/subscribe
  example: []
  syntax:
    content: Task SubscribeAsync(string channelName, Action<IPubSubMessage> action, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: channelName
      type: System.String
    - id: action
      type: System.Action{WeihanLi.Redis.IPubSubMessage}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SubscribeAsync(channelName As String, action As Action(Of IPubSubMessage), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task
  overload: WeihanLi.Redis.IPubSubClient.SubscribeAsync*
  nameWithType.vb: IPubSubClient.SubscribeAsync(String, Action(Of IPubSubMessage), CommandFlags)
  fullName.vb: WeihanLi.Redis.IPubSubClient.SubscribeAsync(System.String, System.Action(Of WeihanLi.Redis.IPubSubMessage), StackExchange.Redis.CommandFlags)
  name.vb: SubscribeAsync(String, Action(Of IPubSubMessage), CommandFlags)
- uid: WeihanLi.Redis.IPubSubClient.Unsubscribe(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IPubSubClient.Unsubscribe(System.String,StackExchange.Redis.CommandFlags)
  id: Unsubscribe(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: Unsubscribe(String, CommandFlags)
  nameWithType: IPubSubClient.Unsubscribe(String, CommandFlags)
  fullName: WeihanLi.Redis.IPubSubClient.Unsubscribe(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Unsubscribe
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 48
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nUnsubscribe from a specified message channel; note; if no handler is specified, the subscription is cancelled regardless\nof the subscribers; if a handler is specified, the subscription is only cancelled if this handler is the\nlast handler remaining against the channel\n"
  remarks: http://redis.io/commands/unsubscribe
  example: []
  syntax:
    content: void Unsubscribe(string channelName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: channelName
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    content.vb: Sub Unsubscribe(channelName As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster)
  overload: WeihanLi.Redis.IPubSubClient.Unsubscribe*
- uid: WeihanLi.Redis.IPubSubClient.UnsubscribeAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IPubSubClient.UnsubscribeAsync(System.String,StackExchange.Redis.CommandFlags)
  id: UnsubscribeAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: UnsubscribeAsync(String, CommandFlags)
  nameWithType: IPubSubClient.UnsubscribeAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.IPubSubClient.UnsubscribeAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: UnsubscribeAsync
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 57
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nUnsubscribe from a specified message channel; note; if no handler is specified, the subscription is cancelled regardless\nof the subscribers; if a handler is specified, the subscription is only cancelled if this handler is the\nlast handler remaining against the channel\n"
  remarks: http://redis.io/commands/unsubscribe
  example: []
  syntax:
    content: Task UnsubscribeAsync(string channelName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: channelName
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UnsubscribeAsync(channelName As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task
  overload: WeihanLi.Redis.IPubSubClient.UnsubscribeAsync*
- uid: WeihanLi.Redis.IPubSubClient.UnsubscribeAll(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IPubSubClient.UnsubscribeAll(StackExchange.Redis.CommandFlags)
  id: UnsubscribeAll(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: UnsubscribeAll(CommandFlags)
  nameWithType: IPubSubClient.UnsubscribeAll(CommandFlags)
  fullName: WeihanLi.Redis.IPubSubClient.UnsubscribeAll(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: UnsubscribeAll
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 62
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Unsubscribe all subscriptions on this instance
  remarks: http://redis.io/commands/unsubscribe
  example: []
  syntax:
    content: void UnsubscribeAll(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    content.vb: Sub UnsubscribeAll(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster)
  overload: WeihanLi.Redis.IPubSubClient.UnsubscribeAll*
- uid: WeihanLi.Redis.IPubSubClient.UnsubscribeAllAsync(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IPubSubClient.UnsubscribeAllAsync(StackExchange.Redis.CommandFlags)
  id: UnsubscribeAllAsync(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IPubSubClient
  langs:
  - csharp
  - vb
  name: UnsubscribeAllAsync(CommandFlags)
  nameWithType: IPubSubClient.UnsubscribeAllAsync(CommandFlags)
  fullName: WeihanLi.Redis.IPubSubClient.UnsubscribeAllAsync(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: UnsubscribeAllAsync
    path: src/WeihanLi.Redis/PubSub/IPubSubClient.cs
    startLine: 67
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Unsubscribe all subscriptions on this instance
  remarks: http://redis.io/commands/unsubscribe
  example: []
  syntax:
    content: Task UnsubscribeAllAsync(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UnsubscribeAllAsync(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task
  overload: WeihanLi.Redis.IPubSubClient.UnsubscribeAllAsync*
references:
- uid: WeihanLi.Redis
  commentId: N:WeihanLi.Redis
  name: WeihanLi.Redis
  nameWithType: WeihanLi.Redis
  fullName: WeihanLi.Redis
- uid: WeihanLi.Redis.IPubSubClient.IsConnected*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.IsConnected
  name: IsConnected
  nameWithType: IPubSubClient.IsConnected
  fullName: WeihanLi.Redis.IPubSubClient.IsConnected
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: WeihanLi.Redis.IPubSubClient.Publish*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.Publish
  name: Publish
  nameWithType: IPubSubClient.Publish
  fullName: WeihanLi.Redis.IPubSubClient.Publish
- uid: WeihanLi.Redis.IPubSubMessage
  commentId: T:WeihanLi.Redis.IPubSubMessage
  parent: WeihanLi.Redis
  name: IPubSubMessage
  nameWithType: IPubSubMessage
  fullName: WeihanLi.Redis.IPubSubMessage
- uid: StackExchange.Redis.CommandFlags
  commentId: T:StackExchange.Redis.CommandFlags
  parent: StackExchange.Redis
  isExternal: true
  name: CommandFlags
  nameWithType: CommandFlags
  fullName: StackExchange.Redis.CommandFlags
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: StackExchange.Redis
  commentId: N:StackExchange.Redis
  isExternal: true
  name: StackExchange.Redis
  nameWithType: StackExchange.Redis
  fullName: StackExchange.Redis
- uid: WeihanLi.Redis.IPubSubClient.PublishAsync*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.PublishAsync
  name: PublishAsync
  nameWithType: IPubSubClient.PublishAsync
  fullName: WeihanLi.Redis.IPubSubClient.PublishAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: WeihanLi.Redis.IPubSubClient.Subscribe*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.Subscribe
  name: Subscribe
  nameWithType: IPubSubClient.Subscribe
  fullName: WeihanLi.Redis.IPubSubClient.Subscribe
- uid: System.Action{WeihanLi.Redis.IPubSubMessage}
  commentId: T:System.Action{WeihanLi.Redis.IPubSubMessage}
  parent: System
  definition: System.Action`1
  name: Action<IPubSubMessage>
  nameWithType: Action<IPubSubMessage>
  fullName: System.Action<WeihanLi.Redis.IPubSubMessage>
  nameWithType.vb: Action(Of IPubSubMessage)
  fullName.vb: System.Action(Of WeihanLi.Redis.IPubSubMessage)
  name.vb: Action(Of IPubSubMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: WeihanLi.Redis.IPubSubMessage
    name: IPubSubMessage
    nameWithType: IPubSubMessage
    fullName: WeihanLi.Redis.IPubSubMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: WeihanLi.Redis.IPubSubMessage
    name: IPubSubMessage
    nameWithType: IPubSubMessage
    fullName: WeihanLi.Redis.IPubSubMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IPubSubClient.SubscribeAsync*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.SubscribeAsync
  name: SubscribeAsync
  nameWithType: IPubSubClient.SubscribeAsync
  fullName: WeihanLi.Redis.IPubSubClient.SubscribeAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: WeihanLi.Redis.IPubSubClient.Unsubscribe*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.Unsubscribe
  name: Unsubscribe
  nameWithType: IPubSubClient.Unsubscribe
  fullName: WeihanLi.Redis.IPubSubClient.Unsubscribe
- uid: WeihanLi.Redis.IPubSubClient.UnsubscribeAsync*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.UnsubscribeAsync
  name: UnsubscribeAsync
  nameWithType: IPubSubClient.UnsubscribeAsync
  fullName: WeihanLi.Redis.IPubSubClient.UnsubscribeAsync
- uid: WeihanLi.Redis.IPubSubClient.UnsubscribeAll*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.UnsubscribeAll
  name: UnsubscribeAll
  nameWithType: IPubSubClient.UnsubscribeAll
  fullName: WeihanLi.Redis.IPubSubClient.UnsubscribeAll
- uid: WeihanLi.Redis.IPubSubClient.UnsubscribeAllAsync*
  commentId: Overload:WeihanLi.Redis.IPubSubClient.UnsubscribeAllAsync
  name: UnsubscribeAllAsync
  nameWithType: IPubSubClient.UnsubscribeAllAsync
  fullName: WeihanLi.Redis.IPubSubClient.UnsubscribeAllAsync
