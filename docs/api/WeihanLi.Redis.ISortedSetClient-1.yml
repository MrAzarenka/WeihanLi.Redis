### YamlMime:ManagedReference
items:
- uid: WeihanLi.Redis.ISortedSetClient`1
  commentId: T:WeihanLi.Redis.ISortedSetClient`1
  id: ISortedSetClient`1
  parent: WeihanLi.Redis
  children:
  - WeihanLi.Redis.ISortedSetClient`1.Add(`0,System.Double,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Add(`0,System.Double,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Add(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Add(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.AddAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.AddAsync(`0,System.Double,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.AddAsync(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.AddAsync(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.CombineAndStore(StackExchange.Redis.SetOperation,System.String,System.String,StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.CombineAndStore(StackExchange.Redis.SetOperation,System.String,System.String[],System.Double[],StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync(StackExchange.Redis.SetOperation,StackExchange.Redis.RedisKey,System.String,StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync(StackExchange.Redis.SetOperation,System.String,System.String[],System.Double[],StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Decrement(`0,System.Double,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.DecrementAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Increment(`0,System.Double,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.IncrementAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Length(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.LengthAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.LengthByValue(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.LengthByValueAsync(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByRank(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScores(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScoresAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByScore(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScores(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScoresAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByValue(`0,`0,StackExchange.Redis.Exclude,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RangeByValueAsync(`0,`0,StackExchange.Redis.Exclude,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Rank(`0,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RankAsync(`0,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Remove(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Remove(`0[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RemoveAsync(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RemoveAsync(`0[],StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRank(System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScore(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValue(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValueAsync(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Scan(`0,System.Int32,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Scan(`0,System.Int32,System.Int64,System.Int32,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.Score(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ISortedSetClient`1.ScoreAsync(`0,StackExchange.Redis.CommandFlags)
  langs:
  - csharp
  - vb
  name: ISortedSetClient<T>
  nameWithType: ISortedSetClient<T>
  fullName: WeihanLi.Redis.ISortedSetClient<T>
  type: Interface
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ISortedSetClient
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 7
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: 'public interface ISortedSetClient<T> : IRedisClient'
    typeParameters:
    - id: T
    content.vb: >-
      Public Interface ISortedSetClient(Of T)
          Inherits IRedisClient
  nameWithType.vb: ISortedSetClient(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T)
  name.vb: ISortedSetClient(Of T)
- uid: WeihanLi.Redis.ISortedSetClient`1.Add(`0,System.Double,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Add(`0,System.Double,StackExchange.Redis.CommandFlags)
  id: Add(`0,System.Double,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Add(T, Double, CommandFlags)
  nameWithType: ISortedSetClient<T>.Add(T, Double, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Add(T, System.Double, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Add
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 16
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nAdds the specified member with the specified score to the sorted set stored at key. If the specified member is\nalready a member of the sorted set, the score is updated and the element reinserted at the right position to ensure\nthe correct ordering.\n"
  remarks: http://redis.io/commands/zadd
  example: []
  syntax:
    content: bool Add(T member, double score, CommandFlags flags)
    parameters:
    - id: member
      type: '{T}'
    - id: score
      type: System.Double
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
      description: True if the value was added, False if it already existed (the score is still updated)
    content.vb: Function Add(member As T, score As Double, flags As CommandFlags) As Boolean
  overload: WeihanLi.Redis.ISortedSetClient`1.Add*
  nameWithType.vb: ISortedSetClient(Of T).Add(T, Double, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Add(T, System.Double, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Add(`0,System.Double,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Add(`0,System.Double,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: Add(`0,System.Double,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Add(T, Double, When, CommandFlags)
  nameWithType: ISortedSetClient<T>.Add(T, Double, When, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Add(T, System.Double, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Add
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 25
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nAdds the specified member with the specified score to the sorted set stored at key. If the specified member is\nalready a member of the sorted set, the score is updated and the element reinserted at the right position to ensure\nthe correct ordering.\n"
  remarks: http://redis.io/commands/zadd
  example: []
  syntax:
    content: bool Add(T member, double score, When when = When.Always, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: score
      type: System.Double
    - id: when
      type: StackExchange.Redis.When
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
      description: True if the value was added, False if it already existed (the score is still updated)
    content.vb: Function Add(member As T, score As Double, when As  When  =  When.Always, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ISortedSetClient`1.Add*
  nameWithType.vb: ISortedSetClient(Of T).Add(T, Double, When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Add(T, System.Double, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Add(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Add(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.CommandFlags)
  id: Add(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Add(SortedSetEntry[], CommandFlags)
  nameWithType: ISortedSetClient<T>.Add(SortedSetEntry[], CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Add(StackExchange.Redis.SortedSetEntry[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Add
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 37
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nAdds all the specified members with the specified scores to the sorted set stored at key. If a specified member is\nalready a member of the sorted set, the score is updated and the element reinserted at the right position to ensure\nthe correct ordering.\n"
  remarks: http://redis.io/commands/zadd
  example: []
  syntax:
    content: long Add(SortedSetEntry[] values, CommandFlags flags)
    parameters:
    - id: values
      type: StackExchange.Redis.SortedSetEntry[]
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: "\nThe number of elements added to the sorted sets, not including elements already existing for which the score\nwas updated.\n"
    content.vb: Function Add(values As SortedSetEntry(), flags As CommandFlags) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.Add*
  nameWithType.vb: ISortedSetClient(Of T).Add(SortedSetEntry(), CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Add(StackExchange.Redis.SortedSetEntry(), StackExchange.Redis.CommandFlags)
  name.vb: Add(SortedSetEntry(), CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Add(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Add(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: Add(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Add(SortedSetEntry[], When, CommandFlags)
  nameWithType: ISortedSetClient<T>.Add(SortedSetEntry[], When, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Add(StackExchange.Redis.SortedSetEntry[], StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Add
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 49
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nAdds all the specified members with the specified scores to the sorted set stored at key. If a specified member is\nalready a member of the sorted set, the score is updated and the element reinserted at the right position to ensure\nthe correct ordering.\n"
  remarks: http://redis.io/commands/zadd
  example: []
  syntax:
    content: long Add(SortedSetEntry[] values, When when = When.Always, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: values
      type: StackExchange.Redis.SortedSetEntry[]
    - id: when
      type: StackExchange.Redis.When
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: "\nThe number of elements added to the sorted sets, not including elements already existing for which the score\nwas updated.\n"
    content.vb: Function Add(values As SortedSetEntry(), when As  When  =  When.Always, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.Add*
  nameWithType.vb: ISortedSetClient(Of T).Add(SortedSetEntry(), When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Add(StackExchange.Redis.SortedSetEntry(), StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: Add(SortedSetEntry(), When, CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.CombineAndStore(StackExchange.Redis.SetOperation,System.String,System.String,StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.CombineAndStore(StackExchange.Redis.SetOperation,System.String,System.String,StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  id: CombineAndStore(StackExchange.Redis.SetOperation,System.String,System.String,StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: CombineAndStore(SetOperation, String, String, Aggregate, CommandFlags)
  nameWithType: ISortedSetClient<T>.CombineAndStore(SetOperation, String, String, Aggregate, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.CombineAndStore(StackExchange.Redis.SetOperation, System.String, System.String, StackExchange.Redis.Aggregate, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: CombineAndStore
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 58
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nComputes a set operation over two sorted sets, and stores the result in destination, optionally performing\na specific aggregation (defaults to sum)\n"
  remarks: http://redis.io/commands/zunionstore
  example: []
  syntax:
    content: long CombineAndStore(SetOperation operation, string destination, string another, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: operation
      type: StackExchange.Redis.SetOperation
    - id: destination
      type: System.String
    - id: another
      type: System.String
    - id: aggregate
      type: StackExchange.Redis.Aggregate
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: the number of elements in the resulting sorted set at destination
    content.vb: Function CombineAndStore(operation As SetOperation, destination As String, another As String, aggregate As Aggregate = Aggregate.Sum, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.CombineAndStore*
  nameWithType.vb: ISortedSetClient(Of T).CombineAndStore(SetOperation, String, String, Aggregate, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).CombineAndStore(StackExchange.Redis.SetOperation, System.String, System.String, StackExchange.Redis.Aggregate, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.CombineAndStore(StackExchange.Redis.SetOperation,System.String,System.String[],System.Double[],StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.CombineAndStore(StackExchange.Redis.SetOperation,System.String,System.String[],System.Double[],StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  id: CombineAndStore(StackExchange.Redis.SetOperation,System.String,System.String[],System.Double[],StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: CombineAndStore(SetOperation, String, String[], Double[], Aggregate, CommandFlags)
  nameWithType: ISortedSetClient<T>.CombineAndStore(SetOperation, String, String[], Double[], Aggregate, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.CombineAndStore(StackExchange.Redis.SetOperation, System.String, System.String[], System.Double[], StackExchange.Redis.Aggregate, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: CombineAndStore
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 69
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nComputes a set operation over multiple sorted sets (optionally using per-set weights), and stores the result in\ndestination, optionally performing\na specific aggregation (defaults to sum)\n"
  remarks: http://redis.io/commands/zunionstore
  example: []
  syntax:
    content: long CombineAndStore(SetOperation operation, string destination, string[] keys, double[] weights = null, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: operation
      type: StackExchange.Redis.SetOperation
    - id: destination
      type: System.String
    - id: keys
      type: System.String[]
    - id: weights
      type: System.Double[]
    - id: aggregate
      type: StackExchange.Redis.Aggregate
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: the number of elements in the resulting sorted set at destination
    content.vb: Function CombineAndStore(operation As SetOperation, destination As String, keys As String(), weights As Double() = Nothing, aggregate As Aggregate = Aggregate.Sum, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.CombineAndStore*
  nameWithType.vb: ISortedSetClient(Of T).CombineAndStore(SetOperation, String, String(), Double(), Aggregate, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).CombineAndStore(StackExchange.Redis.SetOperation, System.String, System.String(), System.Double(), StackExchange.Redis.Aggregate, StackExchange.Redis.CommandFlags)
  name.vb: CombineAndStore(SetOperation, String, String(), Double(), Aggregate, CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Decrement(`0,System.Double,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Decrement(`0,System.Double,StackExchange.Redis.CommandFlags)
  id: Decrement(`0,System.Double,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Decrement(T, Double, CommandFlags)
  nameWithType: ISortedSetClient<T>.Decrement(T, Double, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Decrement(T, System.Double, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Decrement
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 78
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nDecrements the score of member in the sorted set stored at key by decrement. If member does not exist in the sorted\nset, it is added with -decrement as its score (as if its previous score was 0.0).\n"
  remarks: http://redis.io/commands/zincrby
  example: []
  syntax:
    content: double Decrement(T member, double value, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: value
      type: System.Double
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Double
      description: the new score of member
    content.vb: Function Decrement(member As T, value As Double, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Double
  overload: WeihanLi.Redis.ISortedSetClient`1.Decrement*
  nameWithType.vb: ISortedSetClient(Of T).Decrement(T, Double, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Decrement(T, System.Double, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Increment(`0,System.Double,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Increment(`0,System.Double,StackExchange.Redis.CommandFlags)
  id: Increment(`0,System.Double,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Increment(T, Double, CommandFlags)
  nameWithType: ISortedSetClient<T>.Increment(T, Double, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Increment(T, System.Double, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Increment
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 86
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nIncrements the score of member in the sorted set stored at key by increment. If member does not exist in the sorted\nset, it is added with increment as its score (as if its previous score was 0.0).\n"
  remarks: http://redis.io/commands/zincrby
  example: []
  syntax:
    content: double Increment(T member, double value, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: value
      type: System.Double
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Double
      description: the new score of member
    content.vb: Function Increment(member As T, value As Double, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Double
  overload: WeihanLi.Redis.ISortedSetClient`1.Increment*
  nameWithType.vb: ISortedSetClient(Of T).Increment(T, Double, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Increment(T, System.Double, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Length(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Length(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  id: Length(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Length(Double, Double, Exclude, CommandFlags)
  nameWithType: ISortedSetClient<T>.Length(Double, Double, Exclude, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Length(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Length
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 93
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the sorted set cardinality (number of elements) of the sorted set stored at key.\n"
  remarks: http://redis.io/commands/zcard
  example: []
  syntax:
    content: long Length(double min = -Infinity, double max = Infinity, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: the cardinality (number of elements) of the sorted set, or 0 if key does not exist.
    content.vb: Function Length(min As Double = -Infinity, max As Double = Infinity, exclude As Exclude = Exclude.None, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.Length*
  nameWithType.vb: ISortedSetClient(Of T).Length(Double, Double, Exclude, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Length(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.LengthByValue(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.LengthByValue(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  id: LengthByValue(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: LengthByValue(T, T, Exclude, CommandFlags)
  nameWithType: ISortedSetClient<T>.LengthByValue(T, T, Exclude, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.LengthByValue(T, T, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: LengthByValue
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 105
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering,\nthis command returns the number of elements in the sorted set at key with a value between min and max.\n"
  remarks: "\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical\nordering, this command returns all the elements in the sorted set at key with a value between min and max.\n"
  example: []
  syntax:
    content: long LengthByValue(T min, T max, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: min
      type: '{T}'
    - id: max
      type: '{T}'
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: the number of elements in the specified score range.
    content.vb: Function LengthByValue(min As T, max As T, exclude As Exclude = Exclude.None, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.LengthByValue*
  nameWithType.vb: ISortedSetClient(Of T).LengthByValue(T, T, Exclude, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).LengthByValue(T, T, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByRank(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByRank(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  id: RangeByRank(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByRank(Int64, Int64, Order, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByRank(Int64, Int64, Order, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByRank(System.Int64, System.Int64, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByRank
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 117
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the specified range of elements in the sorted set stored at key. By default the elements are considered to\nbe ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.\nBoth start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can\nalso be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the\nsorted set, -2 the penultimate element and so on.\n"
  remarks: http://redis.io/commands/zrange
  example: []
  syntax:
    content: T[] RangeByRank(long start = 0L, long stop = -1L, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Int64
    - id: stop
      type: System.Int64
    - id: order
      type: StackExchange.Redis.Order
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: '{T}[]'
      description: list of elements in the specified range
    content.vb: Function RangeByRank(start As Long = 0L, stop As Long = -1L, order As Order = Order.Ascending, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T()
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByRank*
  nameWithType.vb: ISortedSetClient(Of T).RangeByRank(Int64, Int64, Order, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByRank(System.Int64, System.Int64, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScores(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScores(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  id: RangeByRankWithScores(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByRankWithScores(Int64, Int64, Order, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByRankWithScores(Int64, Int64, Order, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByRankWithScores(System.Int64, System.Int64, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByRankWithScores
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 130
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the specified range of elements in the sorted set stored at key. By default the elements are considered to\nbe ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.\nBoth start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can\nalso be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the\nsorted set, -2 the penultimate element and so on.\n"
  remarks: http://redis.io/commands/zrange
  example: []
  syntax:
    content: SortedSetEntry[] RangeByRankWithScores(long start = 0L, long stop = -1L, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Int64
    - id: stop
      type: System.Int64
    - id: order
      type: StackExchange.Redis.Order
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: StackExchange.Redis.SortedSetEntry[]
      description: list of elements in the specified range
    content.vb: Function RangeByRankWithScores(start As Long = 0L, stop As Long = -1L, order As Order = Order.Ascending, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As SortedSetEntry()
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScores*
  nameWithType.vb: ISortedSetClient(Of T).RangeByRankWithScores(Int64, Int64, Order, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByRankWithScores(System.Int64, System.Int64, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByScore(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByScore(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  id: RangeByScore(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByScore(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByScore(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByScore(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.Order, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByScore
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 142
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the specified range of elements in the sorted set stored at key. By default the elements are considered to\nbe ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.\nStart and stop are used to specify the min and max range for score values. Similar to other range methods the\nvalues are inclusive.\n"
  remarks: http://redis.io/commands/zrangebyscore
  example: []
  syntax:
    content: T[] RangeByScore(double start = -Infinity, double stop = Infinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0L, long take = -1L, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Double
    - id: stop
      type: System.Double
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: order
      type: StackExchange.Redis.Order
    - id: skip
      type: System.Int64
    - id: take
      type: System.Int64
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: '{T}[]'
      description: list of elements in the specified score range
    content.vb: Function RangeByScore(start As Double = -Infinity, stop As Double = Infinity, exclude As Exclude = Exclude.None, order As Order = Order.Ascending, skip As Long = 0L, take As Long = -1L, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T()
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByScore*
  nameWithType.vb: ISortedSetClient(Of T).RangeByScore(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByScore(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.Order, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScores(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScores(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  id: RangeByScoreWithScores(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByScoreWithScores(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByScoreWithScores(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByScoreWithScores(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.Order, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByScoreWithScores
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 155
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the specified range of elements in the sorted set stored at key. By default the elements are considered to\nbe ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.\nStart and stop are used to specify the min and max range for score values. Similar to other range methods the\nvalues are inclusive.\n"
  remarks: http://redis.io/commands/zrangebyscore
  example: []
  syntax:
    content: SortedSetEntry[] RangeByScoreWithScores(double start = -Infinity, double stop = Infinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0L, long take = -1L, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Double
    - id: stop
      type: System.Double
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: order
      type: StackExchange.Redis.Order
    - id: skip
      type: System.Int64
    - id: take
      type: System.Int64
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: StackExchange.Redis.SortedSetEntry[]
      description: list of elements in the specified score range
    content.vb: Function RangeByScoreWithScores(start As Double = -Infinity, stop As Double = Infinity, exclude As Exclude = Exclude.None, order As Order = Order.Ascending, skip As Long = 0L, take As Long = -1L, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As SortedSetEntry()
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScores*
  nameWithType.vb: ISortedSetClient(Of T).RangeByScoreWithScores(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByScoreWithScores(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.Order, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByValue(`0,`0,StackExchange.Redis.Exclude,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByValue(`0,`0,StackExchange.Redis.Exclude,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  id: RangeByValue(`0,`0,StackExchange.Redis.Exclude,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByValue(T, T, Exclude, Int64, Int64, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByValue(T, T, Exclude, Int64, Int64, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByValue(T, T, StackExchange.Redis.Exclude, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByValue
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 165
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering,\nthis command returns all the elements in the sorted set at key with a value between min and max.\n"
  remarks: http://redis.io/commands/zrangebylex
  example: []
  syntax:
    content: T[] RangeByValue(T min = null, T max = null, Exclude exclude = Exclude.None, long skip = 0L, long take = -1L, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: min
      type: '{T}'
    - id: max
      type: '{T}'
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: skip
      type: System.Int64
    - id: take
      type: System.Int64
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: '{T}[]'
      description: list of elements in the specified score range.
    content.vb: Function RangeByValue(min As T = Nothing, max As T = Nothing, exclude As Exclude = Exclude.None, skip As Long = 0L, take As Long = -1L, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T()
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByValue*
  nameWithType.vb: ISortedSetClient(Of T).RangeByValue(T, T, Exclude, Int64, Int64, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByValue(T, T, StackExchange.Redis.Exclude, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Rank(`0,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Rank(`0,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  id: Rank(`0,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Rank(T, Order, CommandFlags)
  nameWithType: ISortedSetClient<T>.Rank(T, Order, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Rank(T, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Rank
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 178
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the rank of member in the sorted set stored at key, by default with the scores ordered from low to high.\nThe rank (or index) is 0-based, which means that the member with the lowest score has rank 0.\n"
  remarks: http://redis.io/commands/zrank
  example: []
  syntax:
    content: long? Rank(T member, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: order
      type: StackExchange.Redis.Order
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Nullable{System.Int64}
      description: "\nIf member exists in the sorted set, the rank of member; If member does not exist in the sorted set or key does\nnot exist, null\n"
    content.vb: Function Rank(member As T, order As Order = Order.Ascending, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long?
  overload: WeihanLi.Redis.ISortedSetClient`1.Rank*
  nameWithType.vb: ISortedSetClient(Of T).Rank(T, Order, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Rank(T, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Remove(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Remove(`0,StackExchange.Redis.CommandFlags)
  id: Remove(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Remove(T, CommandFlags)
  nameWithType: ISortedSetClient<T>.Remove(T, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Remove(T, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Remove
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 185
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nRemoves the specified member from the sorted set stored at key. Non existing members are ignored.\n"
  remarks: http://redis.io/commands/zrem
  example: []
  syntax:
    content: bool Remove(T member, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
      description: True if the member existed in the sorted set and was removed; False otherwise.
    content.vb: Function Remove(member As T, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ISortedSetClient`1.Remove*
  nameWithType.vb: ISortedSetClient(Of T).Remove(T, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Remove(T, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Remove(`0[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Remove(`0[],StackExchange.Redis.CommandFlags)
  id: Remove(`0[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Remove(T[], CommandFlags)
  nameWithType: ISortedSetClient<T>.Remove(T[], CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Remove(T[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Remove
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 192
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nRemoves the specified members from the sorted set stored at key. Non existing members are ignored.\n"
  remarks: http://redis.io/commands/zrem
  example: []
  syntax:
    content: long Remove(T[] members, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: members
      type: '{T}[]'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: The number of members removed from the sorted set, not including non existing members.
    content.vb: Function Remove(members As T(), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.Remove*
  nameWithType.vb: ISortedSetClient(Of T).Remove(T(), CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Remove(T(), StackExchange.Redis.CommandFlags)
  name.vb: Remove(T(), CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRank(System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRank(System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  id: RemoveRangeByRank(System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RemoveRangeByRank(Int64, Int64, CommandFlags)
  nameWithType: ISortedSetClient<T>.RemoveRangeByRank(Int64, Int64, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByRank(System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveRangeByRank
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 202
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nRemoves all elements in the sorted set stored at key with rank between start and stop. Both start and stop are 0\n-based indexes with 0 being the element with the lowest score. These indexes can be negative numbers, where they\nindicate offsets starting at the element with the highest score. For example: -1 is the element with the highest\nscore, -2 the element with the second highest score and so forth.\n"
  remarks: http://redis.io/commands/zremrangebyrank
  example: []
  syntax:
    content: long RemoveRangeByRank(long start, long stop, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Int64
    - id: stop
      type: System.Int64
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: the number of elements removed.
    content.vb: Function RemoveRangeByRank(start As Long, stop As Long, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRank*
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByRank(Int64, Int64, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByRank(System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScore(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScore(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  id: RemoveRangeByScore(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RemoveRangeByScore(Double, Double, Exclude, CommandFlags)
  nameWithType: ISortedSetClient<T>.RemoveRangeByScore(Double, Double, Exclude, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByScore(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveRangeByScore
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 209
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nRemoves all elements in the sorted set stored at key with a score between min and max (inclusive by default).\n"
  remarks: http://redis.io/commands/zremrangebyscore
  example: []
  syntax:
    content: long RemoveRangeByScore(double start, double stop, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Double
    - id: stop
      type: System.Double
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: the number of elements removed.
    content.vb: Function RemoveRangeByScore(start As Double, stop As Double, exclude As Exclude = Exclude.None, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScore*
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByScore(Double, Double, Exclude, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByScore(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValue(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValue(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  id: RemoveRangeByValue(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RemoveRangeByValue(T, T, Exclude, CommandFlags)
  nameWithType: ISortedSetClient<T>.RemoveRangeByValue(T, T, Exclude, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByValue(T, T, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveRangeByValue
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 219
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering,\nthis command removes all elements in the sorted set stored at key between the lexicographical range specified by\nmin and max.\n"
  remarks: http://redis.io/commands/zremrangebylex
  example: []
  syntax:
    content: long RemoveRangeByValue(T min, T max, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: min
      type: '{T}'
    - id: max
      type: '{T}'
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: the number of elements removed.
    content.vb: Function RemoveRangeByValue(min As T, max As T, exclude As Exclude = Exclude.None, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValue*
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByValue(T, T, Exclude, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByValue(T, T, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Scan(`0,System.Int32,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Scan(`0,System.Int32,StackExchange.Redis.CommandFlags)
  id: Scan(`0,System.Int32,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Scan(T, Int32, CommandFlags)
  nameWithType: ISortedSetClient<T>.Scan(T, Int32, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Scan(T, System.Int32, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Scan
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 226
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nThe ZSCAN command is used to incrementally iterate over a sorted set\n"
  remarks: http://redis.io/commands/zscan
  example: []
  syntax:
    content: IEnumerable<SortedSetEntry> Scan(T pattern, int pageSize, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: pattern
      type: '{T}'
    - id: pageSize
      type: System.Int32
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Collections.Generic.IEnumerable{StackExchange.Redis.SortedSetEntry}
      description: yields all elements of the sorted set.
    content.vb: Function Scan(pattern As T, pageSize As Integer, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As IEnumerable(Of SortedSetEntry)
  overload: WeihanLi.Redis.ISortedSetClient`1.Scan*
  nameWithType.vb: ISortedSetClient(Of T).Scan(T, Int32, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Scan(T, System.Int32, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Scan(`0,System.Int32,System.Int64,System.Int32,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Scan(`0,System.Int32,System.Int64,System.Int32,StackExchange.Redis.CommandFlags)
  id: Scan(`0,System.Int32,System.Int64,System.Int32,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Scan(T, Int32, Int64, Int32, CommandFlags)
  nameWithType: ISortedSetClient<T>.Scan(T, Int32, Int64, Int32, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Scan(T, System.Int32, System.Int64, System.Int32, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Scan
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 234
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nThe ZSCAN command is used to incrementally iterate over a sorted set; note: to resume an iteration via\n<em>cursor</em>, cast the original enumerable or enumerator to <em>IScanningCursor</em>.\n"
  remarks: http://redis.io/commands/zscan
  example: []
  syntax:
    content: IEnumerable<SortedSetEntry> Scan(T pattern = null, int pageSize = 10, long cursor = 0L, int pageOffset = 0, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: pattern
      type: '{T}'
    - id: pageSize
      type: System.Int32
    - id: cursor
      type: System.Int64
    - id: pageOffset
      type: System.Int32
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Collections.Generic.IEnumerable{StackExchange.Redis.SortedSetEntry}
      description: yields all elements of the sorted set.
    content.vb: Function Scan(pattern As T = Nothing, pageSize As Integer = 10, cursor As Long = 0L, pageOffset As Integer = 0, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As IEnumerable(Of SortedSetEntry)
  overload: WeihanLi.Redis.ISortedSetClient`1.Scan*
  nameWithType.vb: ISortedSetClient(Of T).Scan(T, Int32, Int64, Int32, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Scan(T, System.Int32, System.Int64, System.Int32, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.Score(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.Score(`0,StackExchange.Redis.CommandFlags)
  id: Score(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: Score(T, CommandFlags)
  nameWithType: ISortedSetClient<T>.Score(T, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Score(T, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Score
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 243
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the score of member in the sorted set at key; If member does not exist in the sorted set, or key does not\nexist, nil is returned.\n"
  remarks: http://redis.io/commands/zscore
  example: []
  syntax:
    content: double? Score(T member, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Nullable{System.Double}
      description: the score of member
    content.vb: Function Score(member As T, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Double?
  overload: WeihanLi.Redis.ISortedSetClient`1.Score*
  nameWithType.vb: ISortedSetClient(Of T).Score(T, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Score(T, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.AddAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.AddAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  id: AddAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: AddAsync(T, Double, CommandFlags)
  nameWithType: ISortedSetClient<T>.AddAsync(T, Double, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.AddAsync(T, System.Double, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: AddAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 252
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nAdds the specified member with the specified score to the sorted set stored at key. If the specified member is\nalready a member of the sorted set, the score is updated and the element reinserted at the right position to ensure\nthe correct ordering.\n"
  remarks: http://redis.io/commands/zadd
  example: []
  syntax:
    content: Task<bool> AddAsync(T member, double score, CommandFlags flags)
    parameters:
    - id: member
      type: '{T}'
    - id: score
      type: System.Double
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if the value was added, False if it already existed (the score is still updated)
    content.vb: Function AddAsync(member As T, score As Double, flags As CommandFlags) As Task(Of Boolean)
  overload: WeihanLi.Redis.ISortedSetClient`1.AddAsync*
  nameWithType.vb: ISortedSetClient(Of T).AddAsync(T, Double, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).AddAsync(T, System.Double, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.AddAsync(`0,System.Double,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.AddAsync(`0,System.Double,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: AddAsync(`0,System.Double,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: AddAsync(T, Double, When, CommandFlags)
  nameWithType: ISortedSetClient<T>.AddAsync(T, Double, When, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.AddAsync(T, System.Double, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: AddAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 261
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nAdds the specified member with the specified score to the sorted set stored at key. If the specified member is\nalready a member of the sorted set, the score is updated and the element reinserted at the right position to ensure\nthe correct ordering.\n"
  remarks: http://redis.io/commands/zadd
  example: []
  syntax:
    content: Task<bool> AddAsync(T member, double score, When when = When.Always, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: score
      type: System.Double
    - id: when
      type: StackExchange.Redis.When
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if the value was added, False if it already existed (the score is still updated)
    content.vb: Function AddAsync(member As T, score As Double, when As  When  =  When.Always, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ISortedSetClient`1.AddAsync*
  nameWithType.vb: ISortedSetClient(Of T).AddAsync(T, Double, When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).AddAsync(T, System.Double, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.AddAsync(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.AddAsync(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.CommandFlags)
  id: AddAsync(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: AddAsync(SortedSetEntry[], CommandFlags)
  nameWithType: ISortedSetClient<T>.AddAsync(SortedSetEntry[], CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.AddAsync(StackExchange.Redis.SortedSetEntry[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: AddAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 273
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nAdds all the specified members with the specified scores to the sorted set stored at key. If a specified member is\nalready a member of the sorted set, the score is updated and the element reinserted at the right position to ensure\nthe correct ordering.\n"
  remarks: http://redis.io/commands/zadd
  example: []
  syntax:
    content: Task<long> AddAsync(SortedSetEntry[] values, CommandFlags flags)
    parameters:
    - id: values
      type: StackExchange.Redis.SortedSetEntry[]
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\nThe number of elements added to the sorted sets, not including elements already existing for which the score\nwas updated.\n"
    content.vb: Function AddAsync(values As SortedSetEntry(), flags As CommandFlags) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.AddAsync*
  nameWithType.vb: ISortedSetClient(Of T).AddAsync(SortedSetEntry(), CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).AddAsync(StackExchange.Redis.SortedSetEntry(), StackExchange.Redis.CommandFlags)
  name.vb: AddAsync(SortedSetEntry(), CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.AddAsync(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.AddAsync(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: AddAsync(StackExchange.Redis.SortedSetEntry[],StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: AddAsync(SortedSetEntry[], When, CommandFlags)
  nameWithType: ISortedSetClient<T>.AddAsync(SortedSetEntry[], When, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.AddAsync(StackExchange.Redis.SortedSetEntry[], StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: AddAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 285
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nAdds all the specified members with the specified scores to the sorted set stored at key. If a specified member is\nalready a member of the sorted set, the score is updated and the element reinserted at the right position to ensure\nthe correct ordering.\n"
  remarks: http://redis.io/commands/zadd
  example: []
  syntax:
    content: Task<long> AddAsync(SortedSetEntry[] values, When when = When.Always, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: values
      type: StackExchange.Redis.SortedSetEntry[]
    - id: when
      type: StackExchange.Redis.When
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\nThe number of elements added to the sorted sets, not including elements already existing for which the score\nwas updated.\n"
    content.vb: Function AddAsync(values As SortedSetEntry(), when As  When  =  When.Always, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.AddAsync*
  nameWithType.vb: ISortedSetClient(Of T).AddAsync(SortedSetEntry(), When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).AddAsync(StackExchange.Redis.SortedSetEntry(), StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: AddAsync(SortedSetEntry(), When, CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync(StackExchange.Redis.SetOperation,StackExchange.Redis.RedisKey,System.String,StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync(StackExchange.Redis.SetOperation,StackExchange.Redis.RedisKey,System.String,StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  id: CombineAndStoreAsync(StackExchange.Redis.SetOperation,StackExchange.Redis.RedisKey,System.String,StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: CombineAndStoreAsync(SetOperation, RedisKey, String, Aggregate, CommandFlags)
  nameWithType: ISortedSetClient<T>.CombineAndStoreAsync(SetOperation, RedisKey, String, Aggregate, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.CombineAndStoreAsync(StackExchange.Redis.SetOperation, StackExchange.Redis.RedisKey, System.String, StackExchange.Redis.Aggregate, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: CombineAndStoreAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 294
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nComputes a set operation over two sorted sets, and stores the result in destination, optionally performing\na specific aggregation (defaults to sum)\n"
  remarks: http://redis.io/commands/zunionstore
  example: []
  syntax:
    content: Task<long> CombineAndStoreAsync(SetOperation operation, RedisKey destination, string another, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: operation
      type: StackExchange.Redis.SetOperation
    - id: destination
      type: StackExchange.Redis.RedisKey
    - id: another
      type: System.String
    - id: aggregate
      type: StackExchange.Redis.Aggregate
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: the number of elements in the resulting sorted set at destination
    content.vb: Function CombineAndStoreAsync(operation As SetOperation, destination As RedisKey, another As String, aggregate As Aggregate = Aggregate.Sum, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync*
  nameWithType.vb: ISortedSetClient(Of T).CombineAndStoreAsync(SetOperation, RedisKey, String, Aggregate, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).CombineAndStoreAsync(StackExchange.Redis.SetOperation, StackExchange.Redis.RedisKey, System.String, StackExchange.Redis.Aggregate, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync(StackExchange.Redis.SetOperation,System.String,System.String[],System.Double[],StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync(StackExchange.Redis.SetOperation,System.String,System.String[],System.Double[],StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  id: CombineAndStoreAsync(StackExchange.Redis.SetOperation,System.String,System.String[],System.Double[],StackExchange.Redis.Aggregate,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: CombineAndStoreAsync(SetOperation, String, String[], Double[], Aggregate, CommandFlags)
  nameWithType: ISortedSetClient<T>.CombineAndStoreAsync(SetOperation, String, String[], Double[], Aggregate, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.CombineAndStoreAsync(StackExchange.Redis.SetOperation, System.String, System.String[], System.Double[], StackExchange.Redis.Aggregate, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: CombineAndStoreAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 305
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nComputes a set operation over multiple sorted sets (optionally using per-set weights), and stores the result in\ndestination, optionally performing\na specific aggregation (defaults to sum)\n"
  remarks: http://redis.io/commands/zunionstore
  example: []
  syntax:
    content: Task<long> CombineAndStoreAsync(SetOperation operation, string destination, string[] keys, double[] weights = null, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: operation
      type: StackExchange.Redis.SetOperation
    - id: destination
      type: System.String
    - id: keys
      type: System.String[]
    - id: weights
      type: System.Double[]
    - id: aggregate
      type: StackExchange.Redis.Aggregate
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: the number of elements in the resulting sorted set at destination
    content.vb: Function CombineAndStoreAsync(operation As SetOperation, destination As String, keys As String(), weights As Double() = Nothing, aggregate As Aggregate = Aggregate.Sum, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync*
  nameWithType.vb: ISortedSetClient(Of T).CombineAndStoreAsync(SetOperation, String, String(), Double(), Aggregate, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).CombineAndStoreAsync(StackExchange.Redis.SetOperation, System.String, System.String(), System.Double(), StackExchange.Redis.Aggregate, StackExchange.Redis.CommandFlags)
  name.vb: CombineAndStoreAsync(SetOperation, String, String(), Double(), Aggregate, CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.DecrementAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.DecrementAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  id: DecrementAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: DecrementAsync(T, Double, CommandFlags)
  nameWithType: ISortedSetClient<T>.DecrementAsync(T, Double, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.DecrementAsync(T, System.Double, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: DecrementAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 314
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nDecrements the score of member in the sorted set stored at key by decrement. If member does not exist in the sorted\nset, it is added with -decrement as its score (as if its previous score was 0.0).\n"
  remarks: http://redis.io/commands/zincrby
  example: []
  syntax:
    content: Task<double> DecrementAsync(T member, double value, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: value
      type: System.Double
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: the new score of member
    content.vb: Function DecrementAsync(member As T, value As Double, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Double)
  overload: WeihanLi.Redis.ISortedSetClient`1.DecrementAsync*
  nameWithType.vb: ISortedSetClient(Of T).DecrementAsync(T, Double, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).DecrementAsync(T, System.Double, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.IncrementAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.IncrementAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  id: IncrementAsync(`0,System.Double,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: IncrementAsync(T, Double, CommandFlags)
  nameWithType: ISortedSetClient<T>.IncrementAsync(T, Double, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.IncrementAsync(T, System.Double, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: IncrementAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 322
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nIncrements the score of member in the sorted set stored at key by increment. If member does not exist in the sorted\nset, it is added with increment as its score (as if its previous score was 0.0).\n"
  remarks: http://redis.io/commands/zincrby
  example: []
  syntax:
    content: Task<double> IncrementAsync(T member, double value, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: value
      type: System.Double
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: the new score of member
    content.vb: Function IncrementAsync(member As T, value As Double, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Double)
  overload: WeihanLi.Redis.ISortedSetClient`1.IncrementAsync*
  nameWithType.vb: ISortedSetClient(Of T).IncrementAsync(T, Double, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).IncrementAsync(T, System.Double, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.LengthAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.LengthAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  id: LengthAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: LengthAsync(Double, Double, Exclude, CommandFlags)
  nameWithType: ISortedSetClient<T>.LengthAsync(Double, Double, Exclude, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.LengthAsync(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: LengthAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 329
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the sorted set cardinality (number of elements) of the sorted set stored at key.\n"
  remarks: http://redis.io/commands/zcard
  example: []
  syntax:
    content: Task<long> LengthAsync(double min = -Infinity, double max = Infinity, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: the cardinality (number of elements) of the sorted set, or 0 if key does not exist.
    content.vb: Function LengthAsync(min As Double = -Infinity, max As Double = Infinity, exclude As Exclude = Exclude.None, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.LengthAsync*
  nameWithType.vb: ISortedSetClient(Of T).LengthAsync(Double, Double, Exclude, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).LengthAsync(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.LengthByValueAsync(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.LengthByValueAsync(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  id: LengthByValueAsync(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: LengthByValueAsync(T, T, Exclude, CommandFlags)
  nameWithType: ISortedSetClient<T>.LengthByValueAsync(T, T, Exclude, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.LengthByValueAsync(T, T, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: LengthByValueAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 341
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering,\nthis command returns the number of elements in the sorted set at key with a value between min and max.\n"
  remarks: "\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical\nordering, this command returns all the elements in the sorted set at key with a value between min and max.\n"
  example: []
  syntax:
    content: Task<long> LengthByValueAsync(T min, T max, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: min
      type: '{T}'
    - id: max
      type: '{T}'
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: the number of elements in the specified score range.
    content.vb: Function LengthByValueAsync(min As T, max As T, exclude As Exclude = Exclude.None, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.LengthByValueAsync*
  nameWithType.vb: ISortedSetClient(Of T).LengthByValueAsync(T, T, Exclude, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).LengthByValueAsync(T, T, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  id: RangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByRankAsync(Int64, Int64, Order, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByRankAsync(Int64, Int64, Order, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByRankAsync(System.Int64, System.Int64, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByRankAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 354
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the specified range of elements in the sorted set stored at key. By default the elements are considered to\nbe ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.\nBoth start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can\nalso be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the\nsorted set, -2 the penultimate element and so on.\n"
  remarks: http://redis.io/commands/zrange
  example: []
  syntax:
    content: Task<T[]> RangeByRankAsync(long start = 0L, long stop = -1L, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Int64
    - id: stop
      type: System.Int64
    - id: order
      type: StackExchange.Redis.Order
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{{T}[]}
      description: list of elements in the specified range
    content.vb: Function RangeByRankAsync(start As Long = 0L, stop As Long = -1L, order As Order = Order.Ascending, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T())
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByRankAsync*
  nameWithType.vb: ISortedSetClient(Of T).RangeByRankAsync(Int64, Int64, Order, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByRankAsync(System.Int64, System.Int64, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScoresAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScoresAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  id: RangeByRankWithScoresAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByRankWithScoresAsync(Int64, Int64, Order, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByRankWithScoresAsync(Int64, Int64, Order, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByRankWithScoresAsync(System.Int64, System.Int64, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByRankWithScoresAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 367
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the specified range of elements in the sorted set stored at key. By default the elements are considered to\nbe ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.\nBoth start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can\nalso be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the\nsorted set, -2 the penultimate element and so on.\n"
  remarks: http://redis.io/commands/zrange
  example: []
  syntax:
    content: Task<SortedSetEntry[]> RangeByRankWithScoresAsync(long start = 0L, long stop = -1L, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Int64
    - id: stop
      type: System.Int64
    - id: order
      type: StackExchange.Redis.Order
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{StackExchange.Redis.SortedSetEntry[]}
      description: list of elements in the specified range
    content.vb: Function RangeByRankWithScoresAsync(start As Long = 0L, stop As Long = -1L, order As Order = Order.Ascending, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of SortedSetEntry())
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScoresAsync*
  nameWithType.vb: ISortedSetClient(Of T).RangeByRankWithScoresAsync(Int64, Int64, Order, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByRankWithScoresAsync(System.Int64, System.Int64, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  id: RangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByScoreAsync(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByScoreAsync(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByScoreAsync(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.Order, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByScoreAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 379
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the specified range of elements in the sorted set stored at key. By default the elements are considered to\nbe ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.\nStart and stop are used to specify the min and max range for score values. Similar to other range methods the\nvalues are inclusive.\n"
  remarks: http://redis.io/commands/zrangebyscore
  example: []
  syntax:
    content: Task<T[]> RangeByScoreAsync(double start = -Infinity, double stop = Infinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0L, long take = -1L, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Double
    - id: stop
      type: System.Double
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: order
      type: StackExchange.Redis.Order
    - id: skip
      type: System.Int64
    - id: take
      type: System.Int64
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{{T}[]}
      description: list of elements in the specified score range
    content.vb: Function RangeByScoreAsync(start As Double = -Infinity, stop As Double = Infinity, exclude As Exclude = Exclude.None, order As Order = Order.Ascending, skip As Long = 0L, take As Long = -1L, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T())
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreAsync*
  nameWithType.vb: ISortedSetClient(Of T).RangeByScoreAsync(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByScoreAsync(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.Order, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScoresAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScoresAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  id: RangeByScoreWithScoresAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByScoreWithScoresAsync(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByScoreWithScoresAsync(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByScoreWithScoresAsync(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.Order, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByScoreWithScoresAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 392
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the specified range of elements in the sorted set stored at key. By default the elements are considered to\nbe ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.\nStart and stop are used to specify the min and max range for score values. Similar to other range methods the\nvalues are inclusive.\n"
  remarks: http://redis.io/commands/zrangebyscore
  example: []
  syntax:
    content: Task<SortedSetEntry[]> RangeByScoreWithScoresAsync(double start = -Infinity, double stop = Infinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0L, long take = -1L, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Double
    - id: stop
      type: System.Double
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: order
      type: StackExchange.Redis.Order
    - id: skip
      type: System.Int64
    - id: take
      type: System.Int64
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{StackExchange.Redis.SortedSetEntry[]}
      description: list of elements in the specified score range
    content.vb: Function RangeByScoreWithScoresAsync(start As Double = -Infinity, stop As Double = Infinity, exclude As Exclude = Exclude.None, order As Order = Order.Ascending, skip As Long = 0L, take As Long = -1L, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of SortedSetEntry())
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScoresAsync*
  nameWithType.vb: ISortedSetClient(Of T).RangeByScoreWithScoresAsync(Double, Double, Exclude, Order, Int64, Int64, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByScoreWithScoresAsync(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.Order, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByValueAsync(`0,`0,StackExchange.Redis.Exclude,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RangeByValueAsync(`0,`0,StackExchange.Redis.Exclude,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  id: RangeByValueAsync(`0,`0,StackExchange.Redis.Exclude,System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RangeByValueAsync(T, T, Exclude, Int64, Int64, CommandFlags)
  nameWithType: ISortedSetClient<T>.RangeByValueAsync(T, T, Exclude, Int64, Int64, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByValueAsync(T, T, StackExchange.Redis.Exclude, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RangeByValueAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 402
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering,\nthis command returns all the elements in the sorted set at key with a value between min and max.\n"
  remarks: http://redis.io/commands/zrangebylex
  example: []
  syntax:
    content: Task<T[]> RangeByValueAsync(T min = null, T max = null, Exclude exclude = Exclude.None, long skip = 0L, long take = -1L, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: min
      type: '{T}'
    - id: max
      type: '{T}'
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: skip
      type: System.Int64
    - id: take
      type: System.Int64
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{{T}[]}
      description: list of elements in the specified score range.
    content.vb: Function RangeByValueAsync(min As T = Nothing, max As T = Nothing, exclude As Exclude = Exclude.None, skip As Long = 0L, take As Long = -1L, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T())
  overload: WeihanLi.Redis.ISortedSetClient`1.RangeByValueAsync*
  nameWithType.vb: ISortedSetClient(Of T).RangeByValueAsync(T, T, Exclude, Int64, Int64, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByValueAsync(T, T, StackExchange.Redis.Exclude, System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RankAsync(`0,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RankAsync(`0,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  id: RankAsync(`0,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RankAsync(T, Order, CommandFlags)
  nameWithType: ISortedSetClient<T>.RankAsync(T, Order, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RankAsync(T, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RankAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 415
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the rank of member in the sorted set stored at key, by default with the scores ordered from low to high.\nThe rank (or index) is 0-based, which means that the member with the lowest score has rank 0.\n"
  remarks: http://redis.io/commands/zrank
  example: []
  syntax:
    content: Task<long? > RankAsync(T member, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: order
      type: StackExchange.Redis.Order
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Int64}}
      description: "\nIf member exists in the sorted set, the rank of member; If member does not exist in the sorted set or key does\nnot exist, null\n"
    content.vb: Function RankAsync(member As T, order As Order = Order.Ascending, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long?)
  overload: WeihanLi.Redis.ISortedSetClient`1.RankAsync*
  nameWithType.vb: ISortedSetClient(Of T).RankAsync(T, Order, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RankAsync(T, StackExchange.Redis.Order, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveAsync(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RemoveAsync(`0,StackExchange.Redis.CommandFlags)
  id: RemoveAsync(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(T, CommandFlags)
  nameWithType: ISortedSetClient<T>.RemoveAsync(T, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveAsync(T, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 422
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nRemoves the specified member from the sorted set stored at key. Non existing members are ignored.\n"
  remarks: http://redis.io/commands/zrem
  example: []
  syntax:
    content: Task<bool> RemoveAsync(T member, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if the member existed in the sorted set and was removed; False otherwise.
    content.vb: Function RemoveAsync(member As T, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ISortedSetClient`1.RemoveAsync*
  nameWithType.vb: ISortedSetClient(Of T).RemoveAsync(T, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveAsync(T, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveAsync(`0[],StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RemoveAsync(`0[],StackExchange.Redis.CommandFlags)
  id: RemoveAsync(`0[],StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(T[], CommandFlags)
  nameWithType: ISortedSetClient<T>.RemoveAsync(T[], CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveAsync(T[], StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 429
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nRemoves the specified members from the sorted set stored at key. Non existing members are ignored.\n"
  remarks: http://redis.io/commands/zrem
  example: []
  syntax:
    content: Task<long> RemoveAsync(T[] members, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: members
      type: '{T}[]'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: The number of members removed from the sorted set, not including non existing members.
    content.vb: Function RemoveAsync(members As T(), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.RemoveAsync*
  nameWithType.vb: ISortedSetClient(Of T).RemoveAsync(T(), CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveAsync(T(), StackExchange.Redis.CommandFlags)
  name.vb: RemoveAsync(T(), CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  id: RemoveRangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RemoveRangeByRankAsync(Int64, Int64, CommandFlags)
  nameWithType: ISortedSetClient<T>.RemoveRangeByRankAsync(Int64, Int64, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByRankAsync(System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveRangeByRankAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 439
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nRemoves all elements in the sorted set stored at key with rank between start and stop. Both start and stop are 0\n-based indexes with 0 being the element with the lowest score. These indexes can be negative numbers, where they\nindicate offsets starting at the element with the highest score. For example: -1 is the element with the highest\nscore, -2 the element with the second highest score and so forth.\n"
  remarks: http://redis.io/commands/zremrangebyrank
  example: []
  syntax:
    content: Task<long> RemoveRangeByRankAsync(long start, long stop, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Int64
    - id: stop
      type: System.Int64
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: the number of elements removed.
    content.vb: Function RemoveRangeByRankAsync(start As Long, stop As Long, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRankAsync*
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByRankAsync(Int64, Int64, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByRankAsync(System.Int64, System.Int64, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  id: RemoveRangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RemoveRangeByScoreAsync(Double, Double, Exclude, CommandFlags)
  nameWithType: ISortedSetClient<T>.RemoveRangeByScoreAsync(Double, Double, Exclude, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByScoreAsync(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveRangeByScoreAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 446
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nRemoves all elements in the sorted set stored at key with a score between min and max (inclusive by default).\n"
  remarks: http://redis.io/commands/zremrangebyscore
  example: []
  syntax:
    content: Task<long> RemoveRangeByScoreAsync(double start, double stop, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: start
      type: System.Double
    - id: stop
      type: System.Double
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: the number of elements removed.
    content.vb: Function RemoveRangeByScoreAsync(start As Double, stop As Double, exclude As Exclude = Exclude.None, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScoreAsync*
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByScoreAsync(Double, Double, Exclude, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByScoreAsync(System.Double, System.Double, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValueAsync(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValueAsync(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  id: RemoveRangeByValueAsync(`0,`0,StackExchange.Redis.Exclude,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: RemoveRangeByValueAsync(T, T, Exclude, CommandFlags)
  nameWithType: ISortedSetClient<T>.RemoveRangeByValueAsync(T, T, Exclude, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByValueAsync(T, T, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveRangeByValueAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 456
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering,\nthis command removes all elements in the sorted set stored at key between the lexicographical range specified by\nmin and max.\n"
  remarks: http://redis.io/commands/zremrangebylex
  example: []
  syntax:
    content: Task<long> RemoveRangeByValueAsync(T min, T max, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: min
      type: '{T}'
    - id: max
      type: '{T}'
    - id: exclude
      type: StackExchange.Redis.Exclude
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: the number of elements removed.
    content.vb: Function RemoveRangeByValueAsync(min As T, max As T, exclude As Exclude = Exclude.None, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValueAsync*
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByValueAsync(T, T, Exclude, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByValueAsync(T, T, StackExchange.Redis.Exclude, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.ISortedSetClient`1.ScoreAsync(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ISortedSetClient`1.ScoreAsync(`0,StackExchange.Redis.CommandFlags)
  id: ScoreAsync(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ISortedSetClient`1
  langs:
  - csharp
  - vb
  name: ScoreAsync(T, CommandFlags)
  nameWithType: ISortedSetClient<T>.ScoreAsync(T, CommandFlags)
  fullName: WeihanLi.Redis.ISortedSetClient<T>.ScoreAsync(T, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ScoreAsync
    path: src/WeihanLi.Redis/SortedSet/ISortedSetClient.cs
    startLine: 465
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the score of member in the sorted set at key; If member does not exist in the sorted set, or key does not\nexist, nil is returned.\n"
  remarks: http://redis.io/commands/zscore
  example: []
  syntax:
    content: Task<double? > ScoreAsync(T member, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: member
      type: '{T}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: the score of member
    content.vb: Function ScoreAsync(member As T, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Double?)
  overload: WeihanLi.Redis.ISortedSetClient`1.ScoreAsync*
  nameWithType.vb: ISortedSetClient(Of T).ScoreAsync(T, CommandFlags)
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).ScoreAsync(T, StackExchange.Redis.CommandFlags)
references:
- uid: WeihanLi.Redis
  commentId: N:WeihanLi.Redis
  name: WeihanLi.Redis
  nameWithType: WeihanLi.Redis
  fullName: WeihanLi.Redis
- uid: WeihanLi.Redis.ISortedSetClient`1.Add*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.Add
  name: Add
  nameWithType: ISortedSetClient<T>.Add
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Add
  nameWithType.vb: ISortedSetClient(Of T).Add
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: StackExchange.Redis.CommandFlags
  commentId: T:StackExchange.Redis.CommandFlags
  parent: StackExchange.Redis
  isExternal: true
  name: CommandFlags
  nameWithType: CommandFlags
  fullName: StackExchange.Redis.CommandFlags
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: StackExchange.Redis
  commentId: N:StackExchange.Redis
  isExternal: true
  name: StackExchange.Redis
  nameWithType: StackExchange.Redis
  fullName: StackExchange.Redis
- uid: StackExchange.Redis.When
  commentId: T:StackExchange.Redis.When
  parent: StackExchange.Redis
  isExternal: true
  name: When
  nameWithType: When
  fullName: StackExchange.Redis.When
- uid: StackExchange.Redis.SortedSetEntry[]
  isExternal: true
  name: SortedSetEntry[]
  nameWithType: SortedSetEntry[]
  fullName: StackExchange.Redis.SortedSetEntry[]
  nameWithType.vb: SortedSetEntry()
  fullName.vb: StackExchange.Redis.SortedSetEntry()
  name.vb: SortedSetEntry()
  spec.csharp:
  - uid: StackExchange.Redis.SortedSetEntry
    name: SortedSetEntry
    nameWithType: SortedSetEntry
    fullName: StackExchange.Redis.SortedSetEntry
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: StackExchange.Redis.SortedSetEntry
    name: SortedSetEntry
    nameWithType: SortedSetEntry
    fullName: StackExchange.Redis.SortedSetEntry
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: WeihanLi.Redis.ISortedSetClient`1.CombineAndStore*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.CombineAndStore
  name: CombineAndStore
  nameWithType: ISortedSetClient<T>.CombineAndStore
  fullName: WeihanLi.Redis.ISortedSetClient<T>.CombineAndStore
  nameWithType.vb: ISortedSetClient(Of T).CombineAndStore
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).CombineAndStore
- uid: StackExchange.Redis.SetOperation
  commentId: T:StackExchange.Redis.SetOperation
  parent: StackExchange.Redis
  isExternal: true
  name: SetOperation
  nameWithType: SetOperation
  fullName: StackExchange.Redis.SetOperation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: StackExchange.Redis.Aggregate
  commentId: T:StackExchange.Redis.Aggregate
  parent: StackExchange.Redis
  isExternal: true
  name: Aggregate
  nameWithType: Aggregate
  fullName: StackExchange.Redis.Aggregate
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: WeihanLi.Redis.ISortedSetClient`1.Decrement*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.Decrement
  name: Decrement
  nameWithType: ISortedSetClient<T>.Decrement
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Decrement
  nameWithType.vb: ISortedSetClient(Of T).Decrement
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Decrement
- uid: WeihanLi.Redis.ISortedSetClient`1.Increment*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.Increment
  name: Increment
  nameWithType: ISortedSetClient<T>.Increment
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Increment
  nameWithType.vb: ISortedSetClient(Of T).Increment
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Increment
- uid: WeihanLi.Redis.ISortedSetClient`1.Length*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.Length
  name: Length
  nameWithType: ISortedSetClient<T>.Length
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Length
  nameWithType.vb: ISortedSetClient(Of T).Length
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Length
- uid: StackExchange.Redis.Exclude
  commentId: T:StackExchange.Redis.Exclude
  parent: StackExchange.Redis
  isExternal: true
  name: Exclude
  nameWithType: Exclude
  fullName: StackExchange.Redis.Exclude
- uid: WeihanLi.Redis.ISortedSetClient`1.LengthByValue*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.LengthByValue
  name: LengthByValue
  nameWithType: ISortedSetClient<T>.LengthByValue
  fullName: WeihanLi.Redis.ISortedSetClient<T>.LengthByValue
  nameWithType.vb: ISortedSetClient(Of T).LengthByValue
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).LengthByValue
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByRank*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByRank
  name: RangeByRank
  nameWithType: ISortedSetClient<T>.RangeByRank
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByRank
  nameWithType.vb: ISortedSetClient(Of T).RangeByRank
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByRank
- uid: StackExchange.Redis.Order
  commentId: T:StackExchange.Redis.Order
  parent: StackExchange.Redis
  isExternal: true
  name: Order
  nameWithType: Order
  fullName: StackExchange.Redis.Order
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScores*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScores
  name: RangeByRankWithScores
  nameWithType: ISortedSetClient<T>.RangeByRankWithScores
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByRankWithScores
  nameWithType.vb: ISortedSetClient(Of T).RangeByRankWithScores
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByRankWithScores
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByScore*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByScore
  name: RangeByScore
  nameWithType: ISortedSetClient<T>.RangeByScore
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByScore
  nameWithType.vb: ISortedSetClient(Of T).RangeByScore
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByScore
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScores*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScores
  name: RangeByScoreWithScores
  nameWithType: ISortedSetClient<T>.RangeByScoreWithScores
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByScoreWithScores
  nameWithType.vb: ISortedSetClient(Of T).RangeByScoreWithScores
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByScoreWithScores
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByValue*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByValue
  name: RangeByValue
  nameWithType: ISortedSetClient<T>.RangeByValue
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByValue
  nameWithType.vb: ISortedSetClient(Of T).RangeByValue
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByValue
- uid: WeihanLi.Redis.ISortedSetClient`1.Rank*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.Rank
  name: Rank
  nameWithType: ISortedSetClient<T>.Rank
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Rank
  nameWithType.vb: ISortedSetClient(Of T).Rank
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Rank
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ISortedSetClient`1.Remove*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.Remove
  name: Remove
  nameWithType: ISortedSetClient<T>.Remove
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Remove
  nameWithType.vb: ISortedSetClient(Of T).Remove
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Remove
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRank*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRank
  name: RemoveRangeByRank
  nameWithType: ISortedSetClient<T>.RemoveRangeByRank
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByRank
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByRank
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByRank
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScore*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScore
  name: RemoveRangeByScore
  nameWithType: ISortedSetClient<T>.RemoveRangeByScore
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByScore
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByScore
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByScore
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValue*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValue
  name: RemoveRangeByValue
  nameWithType: ISortedSetClient<T>.RemoveRangeByValue
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByValue
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByValue
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByValue
- uid: WeihanLi.Redis.ISortedSetClient`1.Scan*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.Scan
  name: Scan
  nameWithType: ISortedSetClient<T>.Scan
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Scan
  nameWithType.vb: ISortedSetClient(Of T).Scan
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Scan
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{StackExchange.Redis.SortedSetEntry}
  commentId: T:System.Collections.Generic.IEnumerable{StackExchange.Redis.SortedSetEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SortedSetEntry>
  nameWithType: IEnumerable<SortedSetEntry>
  fullName: System.Collections.Generic.IEnumerable<StackExchange.Redis.SortedSetEntry>
  nameWithType.vb: IEnumerable(Of SortedSetEntry)
  fullName.vb: System.Collections.Generic.IEnumerable(Of StackExchange.Redis.SortedSetEntry)
  name.vb: IEnumerable(Of SortedSetEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: StackExchange.Redis.SortedSetEntry
    name: SortedSetEntry
    nameWithType: SortedSetEntry
    fullName: StackExchange.Redis.SortedSetEntry
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: StackExchange.Redis.SortedSetEntry
    name: SortedSetEntry
    nameWithType: SortedSetEntry
    fullName: StackExchange.Redis.SortedSetEntry
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: WeihanLi.Redis.ISortedSetClient`1.Score*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.Score
  name: Score
  nameWithType: ISortedSetClient<T>.Score
  fullName: WeihanLi.Redis.ISortedSetClient<T>.Score
  nameWithType.vb: ISortedSetClient(Of T).Score
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).Score
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ISortedSetClient`1.AddAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.AddAsync
  name: AddAsync
  nameWithType: ISortedSetClient<T>.AddAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.AddAsync
  nameWithType.vb: ISortedSetClient(Of T).AddAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).AddAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.CombineAndStoreAsync
  name: CombineAndStoreAsync
  nameWithType: ISortedSetClient<T>.CombineAndStoreAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.CombineAndStoreAsync
  nameWithType.vb: ISortedSetClient(Of T).CombineAndStoreAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).CombineAndStoreAsync
- uid: StackExchange.Redis.RedisKey
  commentId: T:StackExchange.Redis.RedisKey
  parent: StackExchange.Redis
  isExternal: true
  name: RedisKey
  nameWithType: RedisKey
  fullName: StackExchange.Redis.RedisKey
- uid: WeihanLi.Redis.ISortedSetClient`1.DecrementAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.DecrementAsync
  name: DecrementAsync
  nameWithType: ISortedSetClient<T>.DecrementAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.DecrementAsync
  nameWithType.vb: ISortedSetClient(Of T).DecrementAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).DecrementAsync
- uid: System.Threading.Tasks.Task{System.Double}
  commentId: T:System.Threading.Tasks.Task{System.Double}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Double>
  nameWithType: Task<Double>
  fullName: System.Threading.Tasks.Task<System.Double>
  nameWithType.vb: Task(Of Double)
  fullName.vb: System.Threading.Tasks.Task(Of System.Double)
  name.vb: Task(Of Double)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ISortedSetClient`1.IncrementAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.IncrementAsync
  name: IncrementAsync
  nameWithType: ISortedSetClient<T>.IncrementAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.IncrementAsync
  nameWithType.vb: ISortedSetClient(Of T).IncrementAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).IncrementAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.LengthAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.LengthAsync
  name: LengthAsync
  nameWithType: ISortedSetClient<T>.LengthAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.LengthAsync
  nameWithType.vb: ISortedSetClient(Of T).LengthAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).LengthAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.LengthByValueAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.LengthByValueAsync
  name: LengthByValueAsync
  nameWithType: ISortedSetClient<T>.LengthByValueAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.LengthByValueAsync
  nameWithType.vb: ISortedSetClient(Of T).LengthByValueAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).LengthByValueAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByRankAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByRankAsync
  name: RangeByRankAsync
  nameWithType: ISortedSetClient<T>.RangeByRankAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByRankAsync
  nameWithType.vb: ISortedSetClient(Of T).RangeByRankAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByRankAsync
- uid: System.Threading.Tasks.Task{{T}[]}
  commentId: T:System.Threading.Tasks.Task{``0[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T[]>
  nameWithType: Task<T[]>
  fullName: System.Threading.Tasks.Task<T[]>
  nameWithType.vb: Task(Of T())
  fullName.vb: System.Threading.Tasks.Task(Of T())
  name.vb: Task(Of T())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScoresAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByRankWithScoresAsync
  name: RangeByRankWithScoresAsync
  nameWithType: ISortedSetClient<T>.RangeByRankWithScoresAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByRankWithScoresAsync
  nameWithType.vb: ISortedSetClient(Of T).RangeByRankWithScoresAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByRankWithScoresAsync
- uid: System.Threading.Tasks.Task{StackExchange.Redis.SortedSetEntry[]}
  commentId: T:System.Threading.Tasks.Task{StackExchange.Redis.SortedSetEntry[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SortedSetEntry[]>
  nameWithType: Task<SortedSetEntry[]>
  fullName: System.Threading.Tasks.Task<StackExchange.Redis.SortedSetEntry[]>
  nameWithType.vb: Task(Of SortedSetEntry())
  fullName.vb: System.Threading.Tasks.Task(Of StackExchange.Redis.SortedSetEntry())
  name.vb: Task(Of SortedSetEntry())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: StackExchange.Redis.SortedSetEntry
    name: SortedSetEntry
    nameWithType: SortedSetEntry
    fullName: StackExchange.Redis.SortedSetEntry
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: StackExchange.Redis.SortedSetEntry
    name: SortedSetEntry
    nameWithType: SortedSetEntry
    fullName: StackExchange.Redis.SortedSetEntry
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByScoreAsync
  name: RangeByScoreAsync
  nameWithType: ISortedSetClient<T>.RangeByScoreAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByScoreAsync
  nameWithType.vb: ISortedSetClient(Of T).RangeByScoreAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByScoreAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScoresAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByScoreWithScoresAsync
  name: RangeByScoreWithScoresAsync
  nameWithType: ISortedSetClient<T>.RangeByScoreWithScoresAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByScoreWithScoresAsync
  nameWithType.vb: ISortedSetClient(Of T).RangeByScoreWithScoresAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByScoreWithScoresAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.RangeByValueAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RangeByValueAsync
  name: RangeByValueAsync
  nameWithType: ISortedSetClient<T>.RangeByValueAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RangeByValueAsync
  nameWithType.vb: ISortedSetClient(Of T).RangeByValueAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RangeByValueAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.RankAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RankAsync
  name: RankAsync
  nameWithType: ISortedSetClient<T>.RankAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RankAsync
  nameWithType.vb: ISortedSetClient(Of T).RankAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RankAsync
- uid: System.Threading.Tasks.Task{System.Nullable{System.Int64}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.Int64}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<Int64>>
  nameWithType: Task<Nullable<Int64>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.Int64>>
  nameWithType.vb: Task(Of Nullable(Of Int64))
  fullName.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.Int64))
  name.vb: Task(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RemoveAsync
  name: RemoveAsync
  nameWithType: ISortedSetClient<T>.RemoveAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveAsync
  nameWithType.vb: ISortedSetClient(Of T).RemoveAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRankAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByRankAsync
  name: RemoveRangeByRankAsync
  nameWithType: ISortedSetClient<T>.RemoveRangeByRankAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByRankAsync
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByRankAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByRankAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScoreAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByScoreAsync
  name: RemoveRangeByScoreAsync
  nameWithType: ISortedSetClient<T>.RemoveRangeByScoreAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByScoreAsync
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByScoreAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByScoreAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValueAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.RemoveRangeByValueAsync
  name: RemoveRangeByValueAsync
  nameWithType: ISortedSetClient<T>.RemoveRangeByValueAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.RemoveRangeByValueAsync
  nameWithType.vb: ISortedSetClient(Of T).RemoveRangeByValueAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).RemoveRangeByValueAsync
- uid: WeihanLi.Redis.ISortedSetClient`1.ScoreAsync*
  commentId: Overload:WeihanLi.Redis.ISortedSetClient`1.ScoreAsync
  name: ScoreAsync
  nameWithType: ISortedSetClient<T>.ScoreAsync
  fullName: WeihanLi.Redis.ISortedSetClient<T>.ScoreAsync
  nameWithType.vb: ISortedSetClient(Of T).ScoreAsync
  fullName.vb: WeihanLi.Redis.ISortedSetClient(Of T).ScoreAsync
- uid: System.Threading.Tasks.Task{System.Nullable{System.Double}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.Double}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<Double>>
  nameWithType: Task<Nullable<Double>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.Double>>
  nameWithType.vb: Task(Of Nullable(Of Double))
  fullName.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))
  name.vb: Task(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
