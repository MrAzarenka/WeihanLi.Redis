### YamlMime:ManagedReference
items:
- uid: WeihanLi.Redis.IHashCounterClient
  commentId: T:WeihanLi.Redis.IHashCounterClient
  id: IHashCounterClient
  parent: WeihanLi.Redis
  children:
  - WeihanLi.Redis.IHashCounterClient.Base
  - WeihanLi.Redis.IHashCounterClient.Count(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.Decrease(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.Decrease(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.DecreaseAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.DecreaseAsync(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.Increase(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.Increase(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.IncreaseAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.IncreaseAsync(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.Reset(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IHashCounterClient.ResetAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  langs:
  - csharp
  - vb
  name: IHashCounterClient
  nameWithType: IHashCounterClient
  fullName: WeihanLi.Redis.IHashCounterClient
  type: Interface
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: IHashCounterClient
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 9
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nHashCounter\n"
  example: []
  syntax:
    content: 'public interface IHashCounterClient : IRedisClient'
    content.vb: >-
      Public Interface IHashCounterClient
          Inherits IRedisClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: WeihanLi.Redis.IHashCounterClient.Base
  commentId: P:WeihanLi.Redis.IHashCounterClient.Base
  id: Base
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: Base
  nameWithType: IHashCounterClient.Base
  fullName: WeihanLi.Redis.IHashCounterClient.Base
  type: Property
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Base
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 11
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: long Base { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property Base As Long
  overload: WeihanLi.Redis.IHashCounterClient.Base*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: WeihanLi.Redis.IHashCounterClient.Count(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.Count(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: Count(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: Count(RedisValue, CommandFlags)
  nameWithType: IHashCounterClient.Count(RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.Count(StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Count
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 13
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: long Count(RedisValue field, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
    content.vb: Function Count(field As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.IHashCounterClient.Count*
- uid: WeihanLi.Redis.IHashCounterClient.Reset(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.Reset(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: Reset(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: Reset(RedisValue, CommandFlags)
  nameWithType: IHashCounterClient.Reset(RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.Reset(StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Reset
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 15
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Reset(RedisValue field, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Reset(field As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IHashCounterClient.Reset*
- uid: WeihanLi.Redis.IHashCounterClient.ResetAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.ResetAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: ResetAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: ResetAsync(RedisValue, CommandFlags)
  nameWithType: IHashCounterClient.ResetAsync(RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.ResetAsync(StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ResetAsync
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 17
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> ResetAsync(RedisValue field, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function ResetAsync(field As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IHashCounterClient.ResetAsync*
- uid: WeihanLi.Redis.IHashCounterClient.Increase(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.Increase(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: Increase(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: Increase(RedisValue, CommandFlags)
  nameWithType: IHashCounterClient.Increase(RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.Increase(StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Increase
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 19
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: long Increase(RedisValue field, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
    content.vb: Function Increase(field As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.IHashCounterClient.Increase*
- uid: WeihanLi.Redis.IHashCounterClient.Decrease(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.Decrease(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: Decrease(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: Decrease(RedisValue, CommandFlags)
  nameWithType: IHashCounterClient.Decrease(RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.Decrease(StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Decrease
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 21
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: long Decrease(RedisValue field, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
    content.vb: Function Decrease(field As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.IHashCounterClient.Decrease*
- uid: WeihanLi.Redis.IHashCounterClient.Increase(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.Increase(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  id: Increase(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: Increase(RedisValue, Int32, CommandFlags)
  nameWithType: IHashCounterClient.Increase(RedisValue, Int32, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.Increase(StackExchange.Redis.RedisValue, System.Int32, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Increase
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 23
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: long Increase(RedisValue field, int step, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: step
      type: System.Int32
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
    content.vb: Function Increase(field As RedisValue, step As Integer, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.IHashCounterClient.Increase*
- uid: WeihanLi.Redis.IHashCounterClient.Decrease(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.Decrease(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  id: Decrease(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: Decrease(RedisValue, Int32, CommandFlags)
  nameWithType: IHashCounterClient.Decrease(RedisValue, Int32, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.Decrease(StackExchange.Redis.RedisValue, System.Int32, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Decrease
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 25
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: long Decrease(RedisValue field, int step, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: step
      type: System.Int32
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
    content.vb: Function Decrease(field As RedisValue, step As Integer, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.IHashCounterClient.Decrease*
- uid: WeihanLi.Redis.IHashCounterClient.IncreaseAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.IncreaseAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: IncreaseAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: IncreaseAsync(RedisValue, CommandFlags)
  nameWithType: IHashCounterClient.IncreaseAsync(RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.IncreaseAsync(StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: IncreaseAsync
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 27
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<long> IncreaseAsync(RedisValue field, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Function IncreaseAsync(field As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.IHashCounterClient.IncreaseAsync*
- uid: WeihanLi.Redis.IHashCounterClient.DecreaseAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.DecreaseAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  id: DecreaseAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: DecreaseAsync(RedisValue, CommandFlags)
  nameWithType: IHashCounterClient.DecreaseAsync(RedisValue, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.DecreaseAsync(StackExchange.Redis.RedisValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: DecreaseAsync
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 29
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<long> DecreaseAsync(RedisValue field, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Function DecreaseAsync(field As RedisValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.IHashCounterClient.DecreaseAsync*
- uid: WeihanLi.Redis.IHashCounterClient.IncreaseAsync(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.IncreaseAsync(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  id: IncreaseAsync(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: IncreaseAsync(RedisValue, Int32, CommandFlags)
  nameWithType: IHashCounterClient.IncreaseAsync(RedisValue, Int32, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.IncreaseAsync(StackExchange.Redis.RedisValue, System.Int32, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: IncreaseAsync
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 31
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<long> IncreaseAsync(RedisValue field, int step, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: step
      type: System.Int32
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Function IncreaseAsync(field As RedisValue, step As Integer, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.IHashCounterClient.IncreaseAsync*
- uid: WeihanLi.Redis.IHashCounterClient.DecreaseAsync(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IHashCounterClient.DecreaseAsync(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  id: DecreaseAsync(StackExchange.Redis.RedisValue,System.Int32,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IHashCounterClient
  langs:
  - csharp
  - vb
  name: DecreaseAsync(RedisValue, Int32, CommandFlags)
  nameWithType: IHashCounterClient.DecreaseAsync(RedisValue, Int32, CommandFlags)
  fullName: WeihanLi.Redis.IHashCounterClient.DecreaseAsync(StackExchange.Redis.RedisValue, System.Int32, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IHashCounter.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: DecreaseAsync
    path: src/WeihanLi.Redis/Hash/IHashCounter.cs
    startLine: 33
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<long> DecreaseAsync(RedisValue field, int step, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: field
      type: StackExchange.Redis.RedisValue
    - id: step
      type: System.Int32
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Function DecreaseAsync(field As RedisValue, step As Integer, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.IHashCounterClient.DecreaseAsync*
references:
- uid: WeihanLi.Redis
  commentId: N:WeihanLi.Redis
  name: WeihanLi.Redis
  nameWithType: WeihanLi.Redis
  fullName: WeihanLi.Redis
- uid: WeihanLi.Redis.IHashCounterClient.Base*
  commentId: Overload:WeihanLi.Redis.IHashCounterClient.Base
  name: Base
  nameWithType: IHashCounterClient.Base
  fullName: WeihanLi.Redis.IHashCounterClient.Base
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: WeihanLi.Redis.IHashCounterClient.Count*
  commentId: Overload:WeihanLi.Redis.IHashCounterClient.Count
  name: Count
  nameWithType: IHashCounterClient.Count
  fullName: WeihanLi.Redis.IHashCounterClient.Count
- uid: StackExchange.Redis.RedisValue
  commentId: T:StackExchange.Redis.RedisValue
  parent: StackExchange.Redis
  isExternal: true
  name: RedisValue
  nameWithType: RedisValue
  fullName: StackExchange.Redis.RedisValue
- uid: StackExchange.Redis.CommandFlags
  commentId: T:StackExchange.Redis.CommandFlags
  parent: StackExchange.Redis
  isExternal: true
  name: CommandFlags
  nameWithType: CommandFlags
  fullName: StackExchange.Redis.CommandFlags
- uid: StackExchange.Redis
  commentId: N:StackExchange.Redis
  isExternal: true
  name: StackExchange.Redis
  nameWithType: StackExchange.Redis
  fullName: StackExchange.Redis
- uid: WeihanLi.Redis.IHashCounterClient.Reset*
  commentId: Overload:WeihanLi.Redis.IHashCounterClient.Reset
  name: Reset
  nameWithType: IHashCounterClient.Reset
  fullName: WeihanLi.Redis.IHashCounterClient.Reset
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: WeihanLi.Redis.IHashCounterClient.ResetAsync*
  commentId: Overload:WeihanLi.Redis.IHashCounterClient.ResetAsync
  name: ResetAsync
  nameWithType: IHashCounterClient.ResetAsync
  fullName: WeihanLi.Redis.IHashCounterClient.ResetAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: WeihanLi.Redis.IHashCounterClient.Increase*
  commentId: Overload:WeihanLi.Redis.IHashCounterClient.Increase
  name: Increase
  nameWithType: IHashCounterClient.Increase
  fullName: WeihanLi.Redis.IHashCounterClient.Increase
- uid: WeihanLi.Redis.IHashCounterClient.Decrease*
  commentId: Overload:WeihanLi.Redis.IHashCounterClient.Decrease
  name: Decrease
  nameWithType: IHashCounterClient.Decrease
  fullName: WeihanLi.Redis.IHashCounterClient.Decrease
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: WeihanLi.Redis.IHashCounterClient.IncreaseAsync*
  commentId: Overload:WeihanLi.Redis.IHashCounterClient.IncreaseAsync
  name: IncreaseAsync
  nameWithType: IHashCounterClient.IncreaseAsync
  fullName: WeihanLi.Redis.IHashCounterClient.IncreaseAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IHashCounterClient.DecreaseAsync*
  commentId: Overload:WeihanLi.Redis.IHashCounterClient.DecreaseAsync
  name: DecreaseAsync
  nameWithType: IHashCounterClient.DecreaseAsync
  fullName: WeihanLi.Redis.IHashCounterClient.DecreaseAsync
