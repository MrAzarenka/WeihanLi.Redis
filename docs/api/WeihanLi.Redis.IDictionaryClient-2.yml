### YamlMime:ManagedReference
items:
- uid: WeihanLi.Redis.IDictionaryClient`2
  commentId: T:WeihanLi.Redis.IDictionaryClient`2
  id: IDictionaryClient`2
  parent: WeihanLi.Redis
  children:
  - WeihanLi.Redis.IDictionaryClient`2.Add(`0,`1,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Add(System.Collections.Generic.IDictionary{`0,`1},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.AddAsync(`0,`1,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.AddAsync(System.Collections.Generic.IDictionary{`0,`1},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Clear(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.ClearAsync(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Count(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.CountAsync(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Exists(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.ExistsAsync(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Get(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.GetAsync(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.GetOrAdd(`0,`1,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.GetOrAdd(`0,System.Func{`0,`1},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync(`0,`1,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Keys(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.KeysAsync(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Remove(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.RemoveAsync(`0,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Set(`0,`1,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.SetAsync(`0,`1,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.Values(StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.IDictionaryClient`2.ValuesAsync(StackExchange.Redis.CommandFlags)
  langs:
  - csharp
  - vb
  name: IDictionaryClient<TKey, TValue>
  nameWithType: IDictionaryClient<TKey, TValue>
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>
  type: Interface
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: IDictionaryClient
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 8
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: 'public interface IDictionaryClient<TKey, TValue> : IRedisClient'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      Public Interface IDictionaryClient(Of TKey, TValue)
          Inherits IRedisClient
  nameWithType.vb: IDictionaryClient(Of TKey, TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue)
  name.vb: IDictionaryClient(Of TKey, TValue)
- uid: WeihanLi.Redis.IDictionaryClient`2.Exists(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Exists(`0,StackExchange.Redis.CommandFlags)
  id: Exists(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Exists(TKey, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Exists(TKey, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Exists(TKey, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Exists
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 12
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Exists(TKey fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Exists(fieldName As TKey, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IDictionaryClient`2.Exists*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Exists(TKey, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Exists(TKey, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.ExistsAsync(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.ExistsAsync(`0,StackExchange.Redis.CommandFlags)
  id: ExistsAsync(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: ExistsAsync(TKey, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.ExistsAsync(TKey, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.ExistsAsync(TKey, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ExistsAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 14
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> ExistsAsync(TKey fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function ExistsAsync(fieldName As TKey, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IDictionaryClient`2.ExistsAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).ExistsAsync(TKey, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).ExistsAsync(TKey, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Get(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Get(`0,StackExchange.Redis.CommandFlags)
  id: Get(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Get(TKey, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Get(TKey, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Get(TKey, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Get
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 20
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: TValue Get(TKey fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: '{TValue}'
    content.vb: Function Get(fieldName As TKey, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As TValue
  overload: WeihanLi.Redis.IDictionaryClient`2.Get*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Get(TKey, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Get(TKey, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.GetAsync(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.GetAsync(`0,StackExchange.Redis.CommandFlags)
  id: GetAsync(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: GetAsync(TKey, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.GetAsync(TKey, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.GetAsync(TKey, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 22
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<TValue> GetAsync(TKey fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{{TValue}}
    content.vb: Function GetAsync(fieldName As TKey, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of TValue)
  overload: WeihanLi.Redis.IDictionaryClient`2.GetAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).GetAsync(TKey, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).GetAsync(TKey, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.GetOrAdd(`0,`1,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.GetOrAdd(`0,`1,StackExchange.Redis.CommandFlags)
  id: GetOrAdd(`0,`1,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: GetOrAdd(TKey, TValue, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.GetOrAdd(TKey, TValue, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.GetOrAdd(TKey, TValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetOrAdd
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 28
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: TValue GetOrAdd(TKey fieldName, TValue value, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: '{TValue}'
    content.vb: Function GetOrAdd(fieldName As TKey, value As TValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As TValue
  overload: WeihanLi.Redis.IDictionaryClient`2.GetOrAdd*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).GetOrAdd(TKey, TValue, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).GetOrAdd(TKey, TValue, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync(`0,`1,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync(`0,`1,StackExchange.Redis.CommandFlags)
  id: GetOrAddAsync(`0,`1,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: GetOrAddAsync(TKey, TValue, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.GetOrAddAsync(TKey, TValue, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.GetOrAddAsync(TKey, TValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetOrAddAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 30
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<TValue> GetOrAddAsync(TKey fieldName, TValue value, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{{TValue}}
    content.vb: Function GetOrAddAsync(fieldName As TKey, value As TValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of TValue)
  overload: WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).GetOrAddAsync(TKey, TValue, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).GetOrAddAsync(TKey, TValue, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.GetOrAdd(`0,System.Func{`0,`1},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.GetOrAdd(`0,System.Func{`0,`1},StackExchange.Redis.CommandFlags)
  id: GetOrAdd(`0,System.Func{`0,`1},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: GetOrAdd(TKey, Func<TKey, TValue>, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.GetOrAdd(TKey, Func<TKey, TValue>, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.GetOrAdd(TKey, System.Func<TKey, TValue>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetOrAdd
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 32
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: TValue GetOrAdd(TKey fieldName, Func<TKey, TValue> func, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: func
      type: System.Func{{TKey},{TValue}}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: '{TValue}'
    content.vb: Function GetOrAdd(fieldName As TKey, func As Func(Of TKey, TValue), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As TValue
  overload: WeihanLi.Redis.IDictionaryClient`2.GetOrAdd*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).GetOrAdd(TKey, Func(Of TKey, TValue), CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).GetOrAdd(TKey, System.Func(Of TKey, TValue), StackExchange.Redis.CommandFlags)
  name.vb: GetOrAdd(TKey, Func(Of TKey, TValue), CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}},StackExchange.Redis.CommandFlags)
  id: GetOrAddAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: GetOrAddAsync(TKey, Func<TKey, Task<TValue>>, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.GetOrAddAsync(TKey, Func<TKey, Task<TValue>>, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.GetOrAddAsync(TKey, System.Func<TKey, System.Threading.Tasks.Task<TValue>>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetOrAddAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 34
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<TValue> GetOrAddAsync(TKey fieldName, Func<TKey, Task<TValue>> func, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: func
      type: System.Func{{TKey},System.Threading.Tasks.Task{{TValue}}}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{{TValue}}
    content.vb: Function GetOrAddAsync(fieldName As TKey, func As Func(Of TKey, Task(Of TValue)), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of TValue)
  overload: WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).GetOrAddAsync(TKey, Func(Of TKey, Task(Of TValue)), CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).GetOrAddAsync(TKey, System.Func(Of TKey, System.Threading.Tasks.Task(Of TValue)), StackExchange.Redis.CommandFlags)
  name.vb: GetOrAddAsync(TKey, Func(Of TKey, Task(Of TValue)), CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Add(`0,`1,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Add(`0,`1,StackExchange.Redis.CommandFlags)
  id: Add(`0,`1,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Add(TKey, TValue, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Add(TKey, TValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Add
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 40
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Add(TKey fieldName, TValue value, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Add(fieldName As TKey, value As TValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IDictionaryClient`2.Add*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Add(TKey, TValue, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Add(TKey, TValue, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.AddAsync(`0,`1,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.AddAsync(`0,`1,StackExchange.Redis.CommandFlags)
  id: AddAsync(`0,`1,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: AddAsync(TKey, TValue, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.AddAsync(TKey, TValue, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.AddAsync(TKey, TValue, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: AddAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 42
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> AddAsync(TKey fieldName, TValue value, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function AddAsync(fieldName As TKey, value As TValue, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IDictionaryClient`2.AddAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).AddAsync(TKey, TValue, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).AddAsync(TKey, TValue, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Add(System.Collections.Generic.IDictionary{`0,`1},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Add(System.Collections.Generic.IDictionary{`0,`1},StackExchange.Redis.CommandFlags)
  id: Add(System.Collections.Generic.IDictionary{`0,`1},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Add(IDictionary<TKey, TValue>, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Add(IDictionary<TKey, TValue>, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Add(System.Collections.Generic.IDictionary<TKey, TValue>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Add
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 44
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Add(IDictionary<TKey, TValue> values, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: values
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Add(values As IDictionary(Of TKey, TValue), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IDictionaryClient`2.Add*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Add(IDictionary(Of TKey, TValue), CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Add(System.Collections.Generic.IDictionary(Of TKey, TValue), StackExchange.Redis.CommandFlags)
  name.vb: Add(IDictionary(Of TKey, TValue), CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.AddAsync(System.Collections.Generic.IDictionary{`0,`1},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.AddAsync(System.Collections.Generic.IDictionary{`0,`1},StackExchange.Redis.CommandFlags)
  id: AddAsync(System.Collections.Generic.IDictionary{`0,`1},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: AddAsync(IDictionary<TKey, TValue>, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.AddAsync(IDictionary<TKey, TValue>, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.AddAsync(System.Collections.Generic.IDictionary<TKey, TValue>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: AddAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 46
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> AddAsync(IDictionary<TKey, TValue> values, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: values
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function AddAsync(values As IDictionary(Of TKey, TValue), flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IDictionaryClient`2.AddAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).AddAsync(IDictionary(Of TKey, TValue), CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).AddAsync(System.Collections.Generic.IDictionary(Of TKey, TValue), StackExchange.Redis.CommandFlags)
  name.vb: AddAsync(IDictionary(Of TKey, TValue), CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Set(`0,`1,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Set(`0,`1,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: Set(`0,`1,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Set(TKey, TValue, When, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Set(TKey, TValue, When, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Set(TKey, TValue, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Set
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 48
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Set(TKey fieldName, TValue value, When when = When.Always, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    - id: when
      type: StackExchange.Redis.When
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Set(fieldName As TKey, value As TValue, when As  When  =  When.Always, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IDictionaryClient`2.Set*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Set(TKey, TValue, When, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Set(TKey, TValue, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.SetAsync(`0,`1,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.SetAsync(`0,`1,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: SetAsync(`0,`1,StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: SetAsync(TKey, TValue, When, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.SetAsync(TKey, TValue, When, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.SetAsync(TKey, TValue, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: SetAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 50
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> SetAsync(TKey fieldName, TValue value, When when = When.Always, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    - id: when
      type: StackExchange.Redis.When
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function SetAsync(fieldName As TKey, value As TValue, when As  When  =  When.Always, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IDictionaryClient`2.SetAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).SetAsync(TKey, TValue, When, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).SetAsync(TKey, TValue, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Remove(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Remove(`0,StackExchange.Redis.CommandFlags)
  id: Remove(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Remove(TKey, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Remove(TKey, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Remove(TKey, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Remove
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 56
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Remove(TKey fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Remove(fieldName As TKey, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IDictionaryClient`2.Remove*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Remove(TKey, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Remove(TKey, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.RemoveAsync(`0,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.RemoveAsync(`0,StackExchange.Redis.CommandFlags)
  id: RemoveAsync(`0,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: RemoveAsync(TKey, CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.RemoveAsync(TKey, CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.RemoveAsync(TKey, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 58
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> RemoveAsync(TKey fieldName, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: fieldName
      type: '{TKey}'
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function RemoveAsync(fieldName As TKey, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IDictionaryClient`2.RemoveAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).RemoveAsync(TKey, CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).RemoveAsync(TKey, StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Clear(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Clear(StackExchange.Redis.CommandFlags)
  id: Clear(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Clear(CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Clear(CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Clear(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Clear
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 64
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Clear(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Clear(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.IDictionaryClient`2.Clear*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Clear(CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Clear(StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.ClearAsync(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.ClearAsync(StackExchange.Redis.CommandFlags)
  id: ClearAsync(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: ClearAsync(CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.ClearAsync(CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.ClearAsync(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ClearAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 66
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> ClearAsync(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function ClearAsync(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.IDictionaryClient`2.ClearAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).ClearAsync(CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).ClearAsync(StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Keys(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Keys(StackExchange.Redis.CommandFlags)
  id: Keys(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Keys(CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Keys(CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Keys(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Keys
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 75
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Returns all field names in the hash stored at key.
  remarks: http://redis.io/commands/hkeys
  example: []
  syntax:
    content: TKey[] Keys(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: '{TKey}[]'
      description: list of fields in the hash, or an empty list when key does not exist.
    content.vb: Function Keys(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As TKey()
  overload: WeihanLi.Redis.IDictionaryClient`2.Keys*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Keys(CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Keys(StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Values(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Values(StackExchange.Redis.CommandFlags)
  id: Values(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Values(CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Values(CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Values(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Values
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 80
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Returns all values in the hash stored at key.
  remarks: http://redis.io/commands/hvals
  example: []
  syntax:
    content: TValue[] Values(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: '{TValue}[]'
      description: list of values in the hash, or an empty list when key does not exist.
    content.vb: Function Values(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As TValue()
  overload: WeihanLi.Redis.IDictionaryClient`2.Values*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Values(CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Values(StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.Count(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.Count(StackExchange.Redis.CommandFlags)
  id: Count(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: Count(CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.Count(CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Count(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Count
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 87
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the number of fields contained in the hash stored at key.\n"
  remarks: http://redis.io/commands/hlen
  example: []
  syntax:
    content: long Count(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Int64
      description: number of fields in the hash, or 0 when key does not exist.
    content.vb: Function Count(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Long
  overload: WeihanLi.Redis.IDictionaryClient`2.Count*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Count(CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Count(StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.KeysAsync(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.KeysAsync(StackExchange.Redis.CommandFlags)
  id: KeysAsync(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: KeysAsync(CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.KeysAsync(CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.KeysAsync(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: KeysAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 92
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Returns all field names in the hash stored at key.
  remarks: http://redis.io/commands/hkeys
  example: []
  syntax:
    content: Task<TKey[]> KeysAsync(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{{TKey}[]}
      description: list of fields in the hash, or an empty list when key does not exist.
    content.vb: Function KeysAsync(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of TKey())
  overload: WeihanLi.Redis.IDictionaryClient`2.KeysAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).KeysAsync(CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).KeysAsync(StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.CountAsync(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.CountAsync(StackExchange.Redis.CommandFlags)
  id: CountAsync(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: CountAsync(CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.CountAsync(CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.CountAsync(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: CountAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 99
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nReturns the number of fields contained in the hash stored at key.\n"
  remarks: http://redis.io/commands/hlen
  example: []
  syntax:
    content: Task<long> CountAsync(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: number of fields in the hash, or 0 when key does not exist.
    content.vb: Function CountAsync(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Long)
  overload: WeihanLi.Redis.IDictionaryClient`2.CountAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).CountAsync(CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).CountAsync(StackExchange.Redis.CommandFlags)
- uid: WeihanLi.Redis.IDictionaryClient`2.ValuesAsync(StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.IDictionaryClient`2.ValuesAsync(StackExchange.Redis.CommandFlags)
  id: ValuesAsync(StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.IDictionaryClient`2
  langs:
  - csharp
  - vb
  name: ValuesAsync(CommandFlags)
  nameWithType: IDictionaryClient<TKey, TValue>.ValuesAsync(CommandFlags)
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.ValuesAsync(StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ValuesAsync
    path: src/WeihanLi.Redis/Hash/IDictionaryClient.cs
    startLine: 104
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: Returns all values in the hash stored at key.
  remarks: http://redis.io/commands/hvals
  example: []
  syntax:
    content: Task<TValue[]> ValuesAsync(CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{{TValue}[]}
      description: list of values in the hash, or an empty list when key does not exist.
    content.vb: Function ValuesAsync(flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of TValue())
  overload: WeihanLi.Redis.IDictionaryClient`2.ValuesAsync*
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).ValuesAsync(CommandFlags)
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).ValuesAsync(StackExchange.Redis.CommandFlags)
references:
- uid: WeihanLi.Redis
  commentId: N:WeihanLi.Redis
  name: WeihanLi.Redis
  nameWithType: WeihanLi.Redis
  fullName: WeihanLi.Redis
- uid: WeihanLi.Redis.IDictionaryClient`2.Exists*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Exists
  name: Exists
  nameWithType: IDictionaryClient<TKey, TValue>.Exists
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Exists
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Exists
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Exists
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: StackExchange.Redis.CommandFlags
  commentId: T:StackExchange.Redis.CommandFlags
  parent: StackExchange.Redis
  isExternal: true
  name: CommandFlags
  nameWithType: CommandFlags
  fullName: StackExchange.Redis.CommandFlags
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: StackExchange.Redis
  commentId: N:StackExchange.Redis
  isExternal: true
  name: StackExchange.Redis
  nameWithType: StackExchange.Redis
  fullName: StackExchange.Redis
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: WeihanLi.Redis.IDictionaryClient`2.ExistsAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.ExistsAsync
  name: ExistsAsync
  nameWithType: IDictionaryClient<TKey, TValue>.ExistsAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.ExistsAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).ExistsAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).ExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: WeihanLi.Redis.IDictionaryClient`2.Get*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Get
  name: Get
  nameWithType: IDictionaryClient<TKey, TValue>.Get
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Get
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Get
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Get
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: WeihanLi.Redis.IDictionaryClient`2.GetAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.GetAsync
  name: GetAsync
  nameWithType: IDictionaryClient<TKey, TValue>.GetAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.GetAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).GetAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).GetAsync
- uid: System.Threading.Tasks.Task{{TValue}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TValue>
  nameWithType: Task<TValue>
  fullName: System.Threading.Tasks.Task<TValue>
  nameWithType.vb: Task(Of TValue)
  fullName.vb: System.Threading.Tasks.Task(Of TValue)
  name.vb: Task(Of TValue)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IDictionaryClient`2.GetOrAdd*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.GetOrAdd
  name: GetOrAdd
  nameWithType: IDictionaryClient<TKey, TValue>.GetOrAdd
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.GetOrAdd
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).GetOrAdd
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).GetOrAdd
- uid: WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.GetOrAddAsync
  name: GetOrAddAsync
  nameWithType: IDictionaryClient<TKey, TValue>.GetOrAddAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.GetOrAddAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).GetOrAddAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).GetOrAddAsync
- uid: System.Func{{TKey},{TValue}}
  commentId: T:System.Func{`0,`1}
  parent: System
  definition: System.Func`2
  name: Func<TKey, TValue>
  nameWithType: Func<TKey, TValue>
  fullName: System.Func<TKey, TValue>
  nameWithType.vb: Func(Of TKey, TValue)
  fullName.vb: System.Func(Of TKey, TValue)
  name.vb: Func(Of TKey, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TKey},System.Threading.Tasks.Task{{TValue}}}
  commentId: T:System.Func{`0,System.Threading.Tasks.Task{`1}}
  parent: System
  definition: System.Func`2
  name: Func<TKey, Task<TValue>>
  nameWithType: Func<TKey, Task<TValue>>
  fullName: System.Func<TKey, System.Threading.Tasks.Task<TValue>>
  nameWithType.vb: Func(Of TKey, Task(Of TValue))
  fullName.vb: System.Func(Of TKey, System.Threading.Tasks.Task(Of TValue))
  name.vb: Func(Of TKey, Task(Of TValue))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IDictionaryClient`2.Add*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Add
  name: Add
  nameWithType: IDictionaryClient<TKey, TValue>.Add
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Add
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Add
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Add
- uid: WeihanLi.Redis.IDictionaryClient`2.AddAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.AddAsync
  name: AddAsync
  nameWithType: IDictionaryClient<TKey, TValue>.AddAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.AddAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).AddAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).AddAsync
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: WeihanLi.Redis.IDictionaryClient`2.Set*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Set
  name: Set
  nameWithType: IDictionaryClient<TKey, TValue>.Set
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Set
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Set
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Set
- uid: StackExchange.Redis.When
  commentId: T:StackExchange.Redis.When
  parent: StackExchange.Redis
  isExternal: true
  name: When
  nameWithType: When
  fullName: StackExchange.Redis.When
- uid: WeihanLi.Redis.IDictionaryClient`2.SetAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.SetAsync
  name: SetAsync
  nameWithType: IDictionaryClient<TKey, TValue>.SetAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.SetAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).SetAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).SetAsync
- uid: WeihanLi.Redis.IDictionaryClient`2.Remove*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Remove
  name: Remove
  nameWithType: IDictionaryClient<TKey, TValue>.Remove
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Remove
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Remove
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Remove
- uid: WeihanLi.Redis.IDictionaryClient`2.RemoveAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.RemoveAsync
  name: RemoveAsync
  nameWithType: IDictionaryClient<TKey, TValue>.RemoveAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.RemoveAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).RemoveAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).RemoveAsync
- uid: WeihanLi.Redis.IDictionaryClient`2.Clear*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Clear
  name: Clear
  nameWithType: IDictionaryClient<TKey, TValue>.Clear
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Clear
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Clear
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Clear
- uid: WeihanLi.Redis.IDictionaryClient`2.ClearAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.ClearAsync
  name: ClearAsync
  nameWithType: IDictionaryClient<TKey, TValue>.ClearAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.ClearAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).ClearAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).ClearAsync
- uid: WeihanLi.Redis.IDictionaryClient`2.Keys*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Keys
  name: Keys
  nameWithType: IDictionaryClient<TKey, TValue>.Keys
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Keys
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Keys
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Keys
- uid: '{TKey}[]'
  isExternal: true
  name: TKey[]
  nameWithType: TKey[]
  fullName: TKey[]
  nameWithType.vb: TKey()
  fullName.vb: TKey()
  name.vb: TKey()
  spec.csharp:
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: WeihanLi.Redis.IDictionaryClient`2.Values*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Values
  name: Values
  nameWithType: IDictionaryClient<TKey, TValue>.Values
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Values
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Values
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Values
- uid: '{TValue}[]'
  isExternal: true
  name: TValue[]
  nameWithType: TValue[]
  fullName: TValue[]
  nameWithType.vb: TValue()
  fullName.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: WeihanLi.Redis.IDictionaryClient`2.Count*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.Count
  name: Count
  nameWithType: IDictionaryClient<TKey, TValue>.Count
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.Count
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).Count
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).Count
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: WeihanLi.Redis.IDictionaryClient`2.KeysAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.KeysAsync
  name: KeysAsync
  nameWithType: IDictionaryClient<TKey, TValue>.KeysAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.KeysAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).KeysAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).KeysAsync
- uid: System.Threading.Tasks.Task{{TKey}[]}
  commentId: T:System.Threading.Tasks.Task{`0[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TKey[]>
  nameWithType: Task<TKey[]>
  fullName: System.Threading.Tasks.Task<TKey[]>
  nameWithType.vb: Task(Of TKey())
  fullName.vb: System.Threading.Tasks.Task(Of TKey())
  name.vb: Task(Of TKey())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IDictionaryClient`2.CountAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.CountAsync
  name: CountAsync
  nameWithType: IDictionaryClient<TKey, TValue>.CountAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.CountAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).CountAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).CountAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.IDictionaryClient`2.ValuesAsync*
  commentId: Overload:WeihanLi.Redis.IDictionaryClient`2.ValuesAsync
  name: ValuesAsync
  nameWithType: IDictionaryClient<TKey, TValue>.ValuesAsync
  fullName: WeihanLi.Redis.IDictionaryClient<TKey, TValue>.ValuesAsync
  nameWithType.vb: IDictionaryClient(Of TKey, TValue).ValuesAsync
  fullName.vb: WeihanLi.Redis.IDictionaryClient(Of TKey, TValue).ValuesAsync
- uid: System.Threading.Tasks.Task{{TValue}[]}
  commentId: T:System.Threading.Tasks.Task{`1[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TValue[]>
  nameWithType: Task<TValue[]>
  fullName: System.Threading.Tasks.Task<TValue[]>
  nameWithType.vb: Task(Of TValue())
  fullName.vb: System.Threading.Tasks.Task(Of TValue())
  name.vb: Task(Of TValue())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
