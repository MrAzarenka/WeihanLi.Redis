### YamlMime:ManagedReference
items:
- uid: WeihanLi.Redis.ICacheClient
  commentId: T:WeihanLi.Redis.ICacheClient
  id: ICacheClient
  parent: WeihanLi.Redis
  children:
  - WeihanLi.Redis.ICacheClient.Exists(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.ExistsAsync(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.Expire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.ExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.Get(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.Get``1(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.GetAsync(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.GetAsync``1(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.GetOrSet``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.GetOrSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.Remove(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.RemoveAsync(System.String,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.Set``1(System.String,``0)
  - WeihanLi.Redis.ICacheClient.Set``1(System.String,``0,System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.Set``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,``0)
  - WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  - WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  langs:
  - csharp
  - vb
  name: ICacheClient
  nameWithType: ICacheClient
  fullName: WeihanLi.Redis.ICacheClient
  type: Interface
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ICacheClient
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 14
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  summary: "\nCacheClient\n"
  example: []
  syntax:
    content: 'public interface ICacheClient : IRedisClient'
    content.vb: >-
      Public Interface ICacheClient
          Inherits IRedisClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: WeihanLi.Redis.ICacheClient.Expire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.Expire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  id: Expire(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: Expire(String, Nullable<TimeSpan>, CommandFlags)
  nameWithType: ICacheClient.Expire(String, Nullable<TimeSpan>, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.Expire(System.String, System.Nullable<System.TimeSpan>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Expire
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 18
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Expire(string key, TimeSpan? expiresIn, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Expire(key As String, expiresIn As TimeSpan?, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICacheClient.Expire*
  nameWithType.vb: ICacheClient.Expire(String, Nullable(Of TimeSpan), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.Expire(System.String, System.Nullable(Of System.TimeSpan), StackExchange.Redis.CommandFlags)
  name.vb: Expire(String, Nullable(Of TimeSpan), CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.ExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.ExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  id: ExpireAsync(System.String,System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: ExpireAsync(String, Nullable<TimeSpan>, CommandFlags)
  nameWithType: ICacheClient.ExpireAsync(String, Nullable<TimeSpan>, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.ExpireAsync(System.String, System.Nullable<System.TimeSpan>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ExpireAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 20
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> ExpireAsync(string key, TimeSpan? expiresIn, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function ExpireAsync(key As String, expiresIn As TimeSpan?, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICacheClient.ExpireAsync*
  nameWithType.vb: ICacheClient.ExpireAsync(String, Nullable(Of TimeSpan), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.ExpireAsync(System.String, System.Nullable(Of System.TimeSpan), StackExchange.Redis.CommandFlags)
  name.vb: ExpireAsync(String, Nullable(Of TimeSpan), CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.Exists(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.Exists(System.String,StackExchange.Redis.CommandFlags)
  id: Exists(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: Exists(String, CommandFlags)
  nameWithType: ICacheClient.Exists(String, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.Exists(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Exists
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 26
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Exists(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Exists(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICacheClient.Exists*
- uid: WeihanLi.Redis.ICacheClient.ExistsAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.ExistsAsync(System.String,StackExchange.Redis.CommandFlags)
  id: ExistsAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: ExistsAsync(String, CommandFlags)
  nameWithType: ICacheClient.ExistsAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.ExistsAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: ExistsAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 28
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> ExistsAsync(string key, CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: flags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function ExistsAsync(key As String, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICacheClient.ExistsAsync*
- uid: WeihanLi.Redis.ICacheClient.Get(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.Get(System.String,StackExchange.Redis.CommandFlags)
  id: Get(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: Get(String, CommandFlags)
  nameWithType: ICacheClient.Get(String, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.Get(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Get
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 34
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: string Get(string key, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.String
    content.vb: Function Get(key As String, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As String
  overload: WeihanLi.Redis.ICacheClient.Get*
- uid: WeihanLi.Redis.ICacheClient.GetAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.GetAsync(System.String,StackExchange.Redis.CommandFlags)
  id: GetAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: GetAsync(String, CommandFlags)
  nameWithType: ICacheClient.GetAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.GetAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 36
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<string> GetAsync(string key, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function GetAsync(key As String, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of String)
  overload: WeihanLi.Redis.ICacheClient.GetAsync*
- uid: WeihanLi.Redis.ICacheClient.Get``1(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.Get``1(System.String,StackExchange.Redis.CommandFlags)
  id: Get``1(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandFlags)
  nameWithType: ICacheClient.Get<T>(String, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.Get<T>(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Get
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 38
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: T Get<T>(string key, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function Get(Of T)(key As String, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T
  overload: WeihanLi.Redis.ICacheClient.Get*
  nameWithType.vb: ICacheClient.Get(Of T)(String, CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.Get(Of T)(System.String, StackExchange.Redis.CommandFlags)
  name.vb: Get(Of T)(String, CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.GetAsync``1(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.GetAsync``1(System.String,StackExchange.Redis.CommandFlags)
  id: GetAsync``1(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, CommandFlags)
  nameWithType: ICacheClient.GetAsync<T>(String, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.GetAsync<T>(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 40
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<T> GetAsync<T>(string key, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function GetAsync(Of T)(key As String, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T)
  overload: WeihanLi.Redis.ICacheClient.GetAsync*
  nameWithType.vb: ICacheClient.GetAsync(Of T)(String, CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.GetAsync(Of T)(System.String, StackExchange.Redis.CommandFlags)
  name.vb: GetAsync(Of T)(String, CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.Set``1(System.String,``0)
  commentId: M:WeihanLi.Redis.ICacheClient.Set``1(System.String,``0)
  id: Set``1(System.String,``0)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: Set<T>(String, T)
  nameWithType: ICacheClient.Set<T>(String, T)
  fullName: WeihanLi.Redis.ICacheClient.Set<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Set
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 46
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Set<T>(string key, T value)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Function Set(Of T)(key As String, value As T) As Boolean
  overload: WeihanLi.Redis.ICacheClient.Set*
  nameWithType.vb: ICacheClient.Set(Of T)(String, T)
  fullName.vb: WeihanLi.Redis.ICacheClient.Set(Of T)(System.String, T)
  name.vb: Set(Of T)(String, T)
- uid: WeihanLi.Redis.ICacheClient.Set``1(System.String,``0,System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.Set``1(System.String,``0,System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: Set``1(System.String,``0,System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: Set<T>(String, T, Nullable<TimeSpan>, When, CommandFlags)
  nameWithType: ICacheClient.Set<T>(String, T, Nullable<TimeSpan>, When, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.Set<T>(System.String, T, System.Nullable<System.TimeSpan>, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Set
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 48
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Set<T>(string key, T value, TimeSpan? expiresIn, When when = When.Always, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: '{T}'
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: when
      type: StackExchange.Redis.When
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Function Set(Of T)(key As String, value As T, expiresIn As TimeSpan?, when As  When  =  When.Always, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICacheClient.Set*
  nameWithType.vb: ICacheClient.Set(Of T)(String, T, Nullable(Of TimeSpan), When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.Set(Of T)(System.String, T, System.Nullable(Of System.TimeSpan), StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: Set(Of T)(String, T, Nullable(Of TimeSpan), When, CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.Set``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.Set``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: Set``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: Set<T>(String, Func<T>, Nullable<TimeSpan>, When, CommandFlags)
  nameWithType: ICacheClient.Set<T>(String, Func<T>, Nullable<TimeSpan>, When, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.Set<T>(System.String, System.Func<T>, System.Nullable<System.TimeSpan>, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Set
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 50
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Set<T>(string key, Func<T> func, TimeSpan? expiresIn, When when = When.Always, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: func
      type: System.Func{{T}}
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: when
      type: StackExchange.Redis.When
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Function Set(Of T)(key As String, func As Func(Of T), expiresIn As TimeSpan?, when As  When  =  When.Always, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICacheClient.Set*
  nameWithType.vb: ICacheClient.Set(Of T)(String, Func(Of T), Nullable(Of TimeSpan), When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.Set(Of T)(System.String, System.Func(Of T), System.Nullable(Of System.TimeSpan), StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: Set(Of T)(String, Func(Of T), Nullable(Of TimeSpan), When, CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,``0)
  commentId: M:WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,``0)
  id: SetAsync``1(System.String,``0)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: SetAsync<T>(String, T)
  nameWithType: ICacheClient.SetAsync<T>(String, T)
  fullName: WeihanLi.Redis.ICacheClient.SetAsync<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: SetAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 52
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> SetAsync<T>(string key, T value)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function SetAsync(Of T)(key As String, value As T) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICacheClient.SetAsync*
  nameWithType.vb: ICacheClient.SetAsync(Of T)(String, T)
  fullName.vb: WeihanLi.Redis.ICacheClient.SetAsync(Of T)(System.String, T)
  name.vb: SetAsync(Of T)(String, T)
- uid: WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: SetAsync<T>(String, T, Nullable<TimeSpan>, When, CommandFlags)
  nameWithType: ICacheClient.SetAsync<T>(String, T, Nullable<TimeSpan>, When, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.SetAsync<T>(System.String, T, System.Nullable<System.TimeSpan>, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: SetAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 54
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> SetAsync<T>(string key, T value, TimeSpan? expiresIn, When when = When.Always, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: '{T}'
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: when
      type: StackExchange.Redis.When
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function SetAsync(Of T)(key As String, value As T, expiresIn As TimeSpan?, when As  When  =  When.Always, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICacheClient.SetAsync*
  nameWithType.vb: ICacheClient.SetAsync(Of T)(String, T, Nullable(Of TimeSpan), When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.SetAsync(Of T)(System.String, T, System.Nullable(Of System.TimeSpan), StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: SetAsync(Of T)(String, T, Nullable(Of TimeSpan), When, CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: SetAsync``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: SetAsync<T>(String, Func<T>, Nullable<TimeSpan>, When, CommandFlags)
  nameWithType: ICacheClient.SetAsync<T>(String, Func<T>, Nullable<TimeSpan>, When, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.SetAsync<T>(System.String, System.Func<T>, System.Nullable<System.TimeSpan>, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: SetAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 56
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> SetAsync<T>(string key, Func<T> func, TimeSpan? expiresIn, When when = When.Always, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: func
      type: System.Func{{T}}
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: when
      type: StackExchange.Redis.When
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function SetAsync(Of T)(key As String, func As Func(Of T), expiresIn As TimeSpan?, when As  When  =  When.Always, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICacheClient.SetAsync*
  nameWithType.vb: ICacheClient.SetAsync(Of T)(String, Func(Of T), Nullable(Of TimeSpan), When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.SetAsync(Of T)(System.String, System.Func(Of T), System.Nullable(Of System.TimeSpan), StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: SetAsync(Of T)(String, Func(Of T), Nullable(Of TimeSpan), When, CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.SetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  id: SetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},StackExchange.Redis.When,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: SetAsync<T>(String, Func<Task<T>>, Nullable<TimeSpan>, When, CommandFlags)
  nameWithType: ICacheClient.SetAsync<T>(String, Func<Task<T>>, Nullable<TimeSpan>, When, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.SetAsync<T>(System.String, System.Func<System.Threading.Tasks.Task<T>>, System.Nullable<System.TimeSpan>, StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: SetAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 58
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> SetAsync<T>(string key, Func<Task<T>> func, TimeSpan? expiresIn, When when = When.Always, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: func
      type: System.Func{System.Threading.Tasks.Task{{T}}}
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: when
      type: StackExchange.Redis.When
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function SetAsync(Of T)(key As String, func As Func(Of Task(Of T)), expiresIn As TimeSpan?, when As  When  =  When.Always, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICacheClient.SetAsync*
  nameWithType.vb: ICacheClient.SetAsync(Of T)(String, Func(Of Task(Of T)), Nullable(Of TimeSpan), When, CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.SetAsync(Of T)(System.String, System.Func(Of System.Threading.Tasks.Task(Of T)), System.Nullable(Of System.TimeSpan), StackExchange.Redis.When, StackExchange.Redis.CommandFlags)
  name.vb: SetAsync(Of T)(String, Func(Of Task(Of T)), Nullable(Of TimeSpan), When, CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.GetOrSet``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.GetOrSet``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  id: GetOrSet``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: GetOrSet<T>(String, Func<T>, Nullable<TimeSpan>, CommandFlags)
  nameWithType: ICacheClient.GetOrSet<T>(String, Func<T>, Nullable<TimeSpan>, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.GetOrSet<T>(System.String, System.Func<T>, System.Nullable<System.TimeSpan>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetOrSet
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 64
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: T GetOrSet<T>(string key, Func<T> func, TimeSpan? expiresIn = default(TimeSpan? ), CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: func
      type: System.Func{{T}}
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function GetOrSet(Of T)(key As String, func As Func(Of T), expiresIn As TimeSpan? = Nothing, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As T
  overload: WeihanLi.Redis.ICacheClient.GetOrSet*
  nameWithType.vb: ICacheClient.GetOrSet(Of T)(String, Func(Of T), Nullable(Of TimeSpan), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.GetOrSet(Of T)(System.String, System.Func(Of T), System.Nullable(Of System.TimeSpan), StackExchange.Redis.CommandFlags)
  name.vb: GetOrSet(Of T)(String, Func(Of T), Nullable(Of TimeSpan), CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.GetOrSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.GetOrSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  id: GetOrSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: GetOrSetAsync<T>(String, Func<Task<T>>, Nullable<TimeSpan>, CommandFlags)
  nameWithType: ICacheClient.GetOrSetAsync<T>(String, Func<Task<T>>, Nullable<TimeSpan>, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.GetOrSetAsync<T>(System.String, System.Func<System.Threading.Tasks.Task<T>>, System.Nullable<System.TimeSpan>, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: GetOrSetAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 66
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<T> GetOrSetAsync<T>(string key, Func<Task<T>> func, TimeSpan? expiresIn = default(TimeSpan? ), CommandFlags flags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: func
      type: System.Func{System.Threading.Tasks.Task{{T}}}
    - id: expiresIn
      type: System.Nullable{System.TimeSpan}
    - id: flags
      type: StackExchange.Redis.CommandFlags
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function GetOrSetAsync(Of T)(key As String, func As Func(Of Task(Of T)), expiresIn As TimeSpan? = Nothing, flags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of T)
  overload: WeihanLi.Redis.ICacheClient.GetOrSetAsync*
  nameWithType.vb: ICacheClient.GetOrSetAsync(Of T)(String, Func(Of Task(Of T)), Nullable(Of TimeSpan), CommandFlags)
  fullName.vb: WeihanLi.Redis.ICacheClient.GetOrSetAsync(Of T)(System.String, System.Func(Of System.Threading.Tasks.Task(Of T)), System.Nullable(Of System.TimeSpan), StackExchange.Redis.CommandFlags)
  name.vb: GetOrSetAsync(Of T)(String, Func(Of Task(Of T)), Nullable(Of TimeSpan), CommandFlags)
- uid: WeihanLi.Redis.ICacheClient.Remove(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.Remove(System.String,StackExchange.Redis.CommandFlags)
  id: Remove(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: Remove(String, CommandFlags)
  nameWithType: ICacheClient.Remove(String, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.Remove(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: Remove
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 72
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: bool Remove(string key, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Boolean
    content.vb: Function Remove(key As String, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Boolean
  overload: WeihanLi.Redis.ICacheClient.Remove*
- uid: WeihanLi.Redis.ICacheClient.RemoveAsync(System.String,StackExchange.Redis.CommandFlags)
  commentId: M:WeihanLi.Redis.ICacheClient.RemoveAsync(System.String,StackExchange.Redis.CommandFlags)
  id: RemoveAsync(System.String,StackExchange.Redis.CommandFlags)
  parent: WeihanLi.Redis.ICacheClient
  langs:
  - csharp
  - vb
  name: RemoveAsync(String, CommandFlags)
  nameWithType: ICacheClient.RemoveAsync(String, CommandFlags)
  fullName: WeihanLi.Redis.ICacheClient.RemoveAsync(System.String, StackExchange.Redis.CommandFlags)
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/String/Cache.cs
      branch: dev
      repo: https://github.com/WeihanLi/weihanli.redis.git
    id: RemoveAsync
    path: src/WeihanLi.Redis/String/Cache.cs
    startLine: 74
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: Task<bool> RemoveAsync(string key, CommandFlags commandFlags = CommandFlags.None | CommandFlags.PreferMaster)
    parameters:
    - id: key
      type: System.String
    - id: commandFlags
      type: StackExchange.Redis.CommandFlags
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function RemoveAsync(key As String, commandFlags As CommandFlags = CommandFlags.None Or CommandFlags.PreferMaster) As Task(Of Boolean)
  overload: WeihanLi.Redis.ICacheClient.RemoveAsync*
references:
- uid: WeihanLi.Redis
  commentId: N:WeihanLi.Redis
  name: WeihanLi.Redis
  nameWithType: WeihanLi.Redis
  fullName: WeihanLi.Redis
- uid: WeihanLi.Redis.ICacheClient.Expire*
  commentId: Overload:WeihanLi.Redis.ICacheClient.Expire
  name: Expire
  nameWithType: ICacheClient.Expire
  fullName: WeihanLi.Redis.ICacheClient.Expire
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: StackExchange.Redis.CommandFlags
  commentId: T:StackExchange.Redis.CommandFlags
  parent: StackExchange.Redis
  isExternal: true
  name: CommandFlags
  nameWithType: CommandFlags
  fullName: StackExchange.Redis.CommandFlags
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: StackExchange.Redis
  commentId: N:StackExchange.Redis
  isExternal: true
  name: StackExchange.Redis
  nameWithType: StackExchange.Redis
  fullName: StackExchange.Redis
- uid: WeihanLi.Redis.ICacheClient.ExpireAsync*
  commentId: Overload:WeihanLi.Redis.ICacheClient.ExpireAsync
  name: ExpireAsync
  nameWithType: ICacheClient.ExpireAsync
  fullName: WeihanLi.Redis.ICacheClient.ExpireAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: WeihanLi.Redis.ICacheClient.Exists*
  commentId: Overload:WeihanLi.Redis.ICacheClient.Exists
  name: Exists
  nameWithType: ICacheClient.Exists
  fullName: WeihanLi.Redis.ICacheClient.Exists
- uid: WeihanLi.Redis.ICacheClient.ExistsAsync*
  commentId: Overload:WeihanLi.Redis.ICacheClient.ExistsAsync
  name: ExistsAsync
  nameWithType: ICacheClient.ExistsAsync
  fullName: WeihanLi.Redis.ICacheClient.ExistsAsync
- uid: WeihanLi.Redis.ICacheClient.Get*
  commentId: Overload:WeihanLi.Redis.ICacheClient.Get
  name: Get
  nameWithType: ICacheClient.Get
  fullName: WeihanLi.Redis.ICacheClient.Get
- uid: WeihanLi.Redis.ICacheClient.GetAsync*
  commentId: Overload:WeihanLi.Redis.ICacheClient.GetAsync
  name: GetAsync
  nameWithType: ICacheClient.GetAsync
  fullName: WeihanLi.Redis.ICacheClient.GetAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ICacheClient.Set*
  commentId: Overload:WeihanLi.Redis.ICacheClient.Set
  name: Set
  nameWithType: ICacheClient.Set
  fullName: WeihanLi.Redis.ICacheClient.Set
- uid: StackExchange.Redis.When
  commentId: T:StackExchange.Redis.When
  parent: StackExchange.Redis
  isExternal: true
  name: When
  nameWithType: When
  fullName: StackExchange.Redis.When
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ICacheClient.SetAsync*
  commentId: Overload:WeihanLi.Redis.ICacheClient.SetAsync
  name: SetAsync
  nameWithType: ICacheClient.SetAsync
  fullName: WeihanLi.Redis.ICacheClient.SetAsync
- uid: System.Func{System.Threading.Tasks.Task{{T}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  name: Func<Task<T>>
  nameWithType: Func<Task<T>>
  fullName: System.Func<System.Threading.Tasks.Task<T>>
  nameWithType.vb: Func(Of Task(Of T))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of T))
  name.vb: Func(Of Task(Of T))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.ICacheClient.GetOrSet*
  commentId: Overload:WeihanLi.Redis.ICacheClient.GetOrSet
  name: GetOrSet
  nameWithType: ICacheClient.GetOrSet
  fullName: WeihanLi.Redis.ICacheClient.GetOrSet
- uid: WeihanLi.Redis.ICacheClient.GetOrSetAsync*
  commentId: Overload:WeihanLi.Redis.ICacheClient.GetOrSetAsync
  name: GetOrSetAsync
  nameWithType: ICacheClient.GetOrSetAsync
  fullName: WeihanLi.Redis.ICacheClient.GetOrSetAsync
- uid: WeihanLi.Redis.ICacheClient.Remove*
  commentId: Overload:WeihanLi.Redis.ICacheClient.Remove
  name: Remove
  nameWithType: ICacheClient.Remove
  fullName: WeihanLi.Redis.ICacheClient.Remove
- uid: WeihanLi.Redis.ICacheClient.RemoveAsync*
  commentId: Overload:WeihanLi.Redis.ICacheClient.RemoveAsync
  name: RemoveAsync
  nameWithType: ICacheClient.RemoveAsync
  fullName: WeihanLi.Redis.ICacheClient.RemoveAsync
