### YamlMime:ManagedReference
items:
- uid: WeihanLi.Redis.EventStoreInRedis
  commentId: T:WeihanLi.Redis.EventStoreInRedis
  id: EventStoreInRedis
  parent: WeihanLi.Redis
  children:
  - WeihanLi.Redis.EventStoreInRedis.#ctor(Microsoft.Extensions.Logging.ILogger{WeihanLi.Redis.EventStoreInRedis})
  - WeihanLi.Redis.EventStoreInRedis.AddSubscription``2
  - WeihanLi.Redis.EventStoreInRedis.Clear
  - WeihanLi.Redis.EventStoreInRedis.EventsCacheKey
  - WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes``1
  - WeihanLi.Redis.EventStoreInRedis.GetEventKey``1
  - WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent``1
  - WeihanLi.Redis.EventStoreInRedis.IsEmpty
  - WeihanLi.Redis.EventStoreInRedis.Logger
  - WeihanLi.Redis.EventStoreInRedis.RemoveSubscription``2
  langs:
  - csharp
  - vb
  name: EventStoreInRedis
  nameWithType: EventStoreInRedis
  fullName: WeihanLi.Redis.EventStoreInRedis
  type: Class
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: EventStoreInRedis
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 9
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: 'public class EventStoreInRedis : IEventStore'
    content.vb: >-
      Public Class EventStoreInRedis
          Implements IEventStore
  inheritance:
  - System.Object
  implements:
  - WeihanLi.Common.Event.IEventStore
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: WeihanLi.Redis.EventStoreInRedis.EventsCacheKey
  commentId: F:WeihanLi.Redis.EventStoreInRedis.EventsCacheKey
  id: EventsCacheKey
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: EventsCacheKey
  nameWithType: EventStoreInRedis.EventsCacheKey
  fullName: WeihanLi.Redis.EventStoreInRedis.EventsCacheKey
  type: Field
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: EventsCacheKey
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 11
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: protected readonly string EventsCacheKey
    return:
      type: System.String
    content.vb: Protected ReadOnly EventsCacheKey As String
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: WeihanLi.Redis.EventStoreInRedis.Logger
  commentId: F:WeihanLi.Redis.EventStoreInRedis.Logger
  id: Logger
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: EventStoreInRedis.Logger
  fullName: WeihanLi.Redis.EventStoreInRedis.Logger
  type: Field
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: Logger
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 12
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: protected readonly ILogger Logger
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly Logger As ILogger
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: WeihanLi.Redis.EventStoreInRedis.#ctor(Microsoft.Extensions.Logging.ILogger{WeihanLi.Redis.EventStoreInRedis})
  commentId: M:WeihanLi.Redis.EventStoreInRedis.#ctor(Microsoft.Extensions.Logging.ILogger{WeihanLi.Redis.EventStoreInRedis})
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{WeihanLi.Redis.EventStoreInRedis})'
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: EventStoreInRedis(ILogger<EventStoreInRedis>)
  nameWithType: EventStoreInRedis.EventStoreInRedis(ILogger<EventStoreInRedis>)
  fullName: WeihanLi.Redis.EventStoreInRedis.EventStoreInRedis(Microsoft.Extensions.Logging.ILogger<WeihanLi.Redis.EventStoreInRedis>)
  type: Constructor
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: .ctor
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 16
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: public EventStoreInRedis(ILogger<EventStoreInRedis> logger)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{WeihanLi.Redis.EventStoreInRedis}
    content.vb: Public Sub New(logger As ILogger(Of EventStoreInRedis))
  overload: WeihanLi.Redis.EventStoreInRedis.#ctor*
  nameWithType.vb: EventStoreInRedis.EventStoreInRedis(ILogger(Of EventStoreInRedis))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WeihanLi.Redis.EventStoreInRedis.EventStoreInRedis(Microsoft.Extensions.Logging.ILogger(Of WeihanLi.Redis.EventStoreInRedis))
  name.vb: EventStoreInRedis(ILogger(Of EventStoreInRedis))
- uid: WeihanLi.Redis.EventStoreInRedis.IsEmpty
  commentId: P:WeihanLi.Redis.EventStoreInRedis.IsEmpty
  id: IsEmpty
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: EventStoreInRedis.IsEmpty
  fullName: WeihanLi.Redis.EventStoreInRedis.IsEmpty
  type: Property
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: IsEmpty
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 24
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: WeihanLi.Redis.EventStoreInRedis.IsEmpty*
  implements:
  - WeihanLi.Common.Event.IEventStore.IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: WeihanLi.Redis.EventStoreInRedis.AddSubscription``2
  commentId: M:WeihanLi.Redis.EventStoreInRedis.AddSubscription``2
  id: AddSubscription``2
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: AddSubscription<TEvent, TEventHandler>()
  nameWithType: EventStoreInRedis.AddSubscription<TEvent, TEventHandler>()
  fullName: WeihanLi.Redis.EventStoreInRedis.AddSubscription<TEvent, TEventHandler>()
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: AddSubscription
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 26
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: >-
      public bool AddSubscription<TEvent, TEventHandler>()
          where TEvent : EventBase where TEventHandler : IEventHandler<TEvent>
    typeParameters:
    - id: TEvent
    - id: TEventHandler
    return:
      type: System.Boolean
    content.vb: Public Function AddSubscription(Of TEvent As EventBase, TEventHandler As IEventHandler(Of TEvent)) As Boolean
  overload: WeihanLi.Redis.EventStoreInRedis.AddSubscription*
  implements:
  - WeihanLi.Common.Event.IEventStore.AddSubscription``2
  nameWithType.vb: EventStoreInRedis.AddSubscription(Of TEvent, TEventHandler)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WeihanLi.Redis.EventStoreInRedis.AddSubscription(Of TEvent, TEventHandler)()
  name.vb: AddSubscription(Of TEvent, TEventHandler)()
- uid: WeihanLi.Redis.EventStoreInRedis.Clear
  commentId: M:WeihanLi.Redis.EventStoreInRedis.Clear
  id: Clear
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: EventStoreInRedis.Clear()
  fullName: WeihanLi.Redis.EventStoreInRedis.Clear()
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: Clear
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 49
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: public bool Clear()
    return:
      type: System.Boolean
    content.vb: Public Function Clear As Boolean
  overload: WeihanLi.Redis.EventStoreInRedis.Clear*
  implements:
  - WeihanLi.Common.Event.IEventStore.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes``1
  commentId: M:WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes``1
  id: GetEventHandlerTypes``1
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: GetEventHandlerTypes<TEvent>()
  nameWithType: EventStoreInRedis.GetEventHandlerTypes<TEvent>()
  fullName: WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes<TEvent>()
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: GetEventHandlerTypes
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 54
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: >-
      public ICollection<Type> GetEventHandlerTypes<TEvent>()
          where TEvent : EventBase
    typeParameters:
    - id: TEvent
    return:
      type: System.Collections.Generic.ICollection{System.Type}
    content.vb: Public Function GetEventHandlerTypes(Of TEvent As EventBase) As ICollection(Of Type)
  overload: WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes*
  implements:
  - WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes``1
  nameWithType.vb: EventStoreInRedis.GetEventHandlerTypes(Of TEvent)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes(Of TEvent)()
  name.vb: GetEventHandlerTypes(Of TEvent)()
- uid: WeihanLi.Redis.EventStoreInRedis.GetEventKey``1
  commentId: M:WeihanLi.Redis.EventStoreInRedis.GetEventKey``1
  id: GetEventKey``1
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: GetEventKey<TEvent>()
  nameWithType: EventStoreInRedis.GetEventKey<TEvent>()
  fullName: WeihanLi.Redis.EventStoreInRedis.GetEventKey<TEvent>()
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: GetEventKey
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 60
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: public string GetEventKey<TEvent>()
    typeParameters:
    - id: TEvent
    return:
      type: System.String
    content.vb: Public Function GetEventKey(Of TEvent) As String
  overload: WeihanLi.Redis.EventStoreInRedis.GetEventKey*
  implements:
  - WeihanLi.Common.Event.IEventStore.GetEventKey``1
  nameWithType.vb: EventStoreInRedis.GetEventKey(Of TEvent)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WeihanLi.Redis.EventStoreInRedis.GetEventKey(Of TEvent)()
  name.vb: GetEventKey(Of TEvent)()
- uid: WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent``1
  commentId: M:WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent``1
  id: HasSubscriptionsForEvent``1
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: HasSubscriptionsForEvent<TEvent>()
  nameWithType: EventStoreInRedis.HasSubscriptionsForEvent<TEvent>()
  fullName: WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent<TEvent>()
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: HasSubscriptionsForEvent
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 65
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: >-
      public bool HasSubscriptionsForEvent<TEvent>()
          where TEvent : EventBase
    typeParameters:
    - id: TEvent
    return:
      type: System.Boolean
    content.vb: Public Function HasSubscriptionsForEvent(Of TEvent As EventBase) As Boolean
  overload: WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent*
  implements:
  - WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent``1
  nameWithType.vb: EventStoreInRedis.HasSubscriptionsForEvent(Of TEvent)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent(Of TEvent)()
  name.vb: HasSubscriptionsForEvent(Of TEvent)()
- uid: WeihanLi.Redis.EventStoreInRedis.RemoveSubscription``2
  commentId: M:WeihanLi.Redis.EventStoreInRedis.RemoveSubscription``2
  id: RemoveSubscription``2
  parent: WeihanLi.Redis.EventStoreInRedis
  langs:
  - csharp
  - vb
  name: RemoveSubscription<TEvent, TEventHandler>()
  nameWithType: EventStoreInRedis.RemoveSubscription<TEvent, TEventHandler>()
  fullName: WeihanLi.Redis.EventStoreInRedis.RemoveSubscription<TEvent, TEventHandler>()
  type: Method
  source:
    remote:
      path: src/WeihanLi.Redis/Event/RedisEventStore.cs
      branch: dev
      repo: https://github.com/WeihanLi/WeihanLi.Redis.git
    id: RemoveSubscription
    path: src/WeihanLi.Redis/Event/RedisEventStore.cs
    startLine: 71
  assemblies:
  - WeihanLi.Redis
  namespace: WeihanLi.Redis
  syntax:
    content: >-
      public bool RemoveSubscription<TEvent, TEventHandler>()
          where TEvent : EventBase where TEventHandler : IEventHandler<TEvent>
    typeParameters:
    - id: TEvent
    - id: TEventHandler
    return:
      type: System.Boolean
    content.vb: Public Function RemoveSubscription(Of TEvent As EventBase, TEventHandler As IEventHandler(Of TEvent)) As Boolean
  overload: WeihanLi.Redis.EventStoreInRedis.RemoveSubscription*
  implements:
  - WeihanLi.Common.Event.IEventStore.RemoveSubscription``2
  nameWithType.vb: EventStoreInRedis.RemoveSubscription(Of TEvent, TEventHandler)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WeihanLi.Redis.EventStoreInRedis.RemoveSubscription(Of TEvent, TEventHandler)()
  name.vb: RemoveSubscription(Of TEvent, TEventHandler)()
references:
- uid: WeihanLi.Redis
  commentId: N:WeihanLi.Redis
  name: WeihanLi.Redis
  nameWithType: WeihanLi.Redis
  fullName: WeihanLi.Redis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: WeihanLi.Common.Event.IEventStore
  commentId: T:WeihanLi.Common.Event.IEventStore
  parent: WeihanLi.Common.Event
  isExternal: true
  name: IEventStore
  nameWithType: IEventStore
  fullName: WeihanLi.Common.Event.IEventStore
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: WeihanLi.Common.Event
  commentId: N:WeihanLi.Common.Event
  isExternal: true
  name: WeihanLi.Common.Event
  nameWithType: WeihanLi.Common.Event
  fullName: WeihanLi.Common.Event
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: WeihanLi.Redis.EventStoreInRedis.#ctor*
  commentId: Overload:WeihanLi.Redis.EventStoreInRedis.#ctor
  name: EventStoreInRedis
  nameWithType: EventStoreInRedis.EventStoreInRedis
  fullName: WeihanLi.Redis.EventStoreInRedis.EventStoreInRedis
- uid: Microsoft.Extensions.Logging.ILogger{WeihanLi.Redis.EventStoreInRedis}
  commentId: T:Microsoft.Extensions.Logging.ILogger{WeihanLi.Redis.EventStoreInRedis}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<EventStoreInRedis>
  nameWithType: ILogger<EventStoreInRedis>
  fullName: Microsoft.Extensions.Logging.ILogger<WeihanLi.Redis.EventStoreInRedis>
  nameWithType.vb: ILogger(Of EventStoreInRedis)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of WeihanLi.Redis.EventStoreInRedis)
  name.vb: ILogger(Of EventStoreInRedis)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: WeihanLi.Redis.EventStoreInRedis
    name: EventStoreInRedis
    nameWithType: EventStoreInRedis
    fullName: WeihanLi.Redis.EventStoreInRedis
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: WeihanLi.Redis.EventStoreInRedis
    name: EventStoreInRedis
    nameWithType: EventStoreInRedis
    fullName: WeihanLi.Redis.EventStoreInRedis
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.EventStoreInRedis.IsEmpty*
  commentId: Overload:WeihanLi.Redis.EventStoreInRedis.IsEmpty
  name: IsEmpty
  nameWithType: EventStoreInRedis.IsEmpty
  fullName: WeihanLi.Redis.EventStoreInRedis.IsEmpty
- uid: WeihanLi.Common.Event.IEventStore.IsEmpty
  commentId: P:WeihanLi.Common.Event.IEventStore.IsEmpty
  parent: WeihanLi.Common.Event.IEventStore
  isExternal: true
  name: IsEmpty
  nameWithType: IEventStore.IsEmpty
  fullName: WeihanLi.Common.Event.IEventStore.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: WeihanLi.Redis.EventStoreInRedis.AddSubscription*
  commentId: Overload:WeihanLi.Redis.EventStoreInRedis.AddSubscription
  name: AddSubscription
  nameWithType: EventStoreInRedis.AddSubscription
  fullName: WeihanLi.Redis.EventStoreInRedis.AddSubscription
- uid: WeihanLi.Common.Event.IEventStore.AddSubscription``2
  commentId: M:WeihanLi.Common.Event.IEventStore.AddSubscription``2
  parent: WeihanLi.Common.Event.IEventStore
  isExternal: true
  name: AddSubscription<TEvent, TEventHandler>()
  nameWithType: IEventStore.AddSubscription<TEvent, TEventHandler>()
  fullName: WeihanLi.Common.Event.IEventStore.AddSubscription<TEvent, TEventHandler>()
  nameWithType.vb: IEventStore.AddSubscription(Of TEvent, TEventHandler)()
  fullName.vb: WeihanLi.Common.Event.IEventStore.AddSubscription(Of TEvent, TEventHandler)()
  name.vb: AddSubscription(Of TEvent, TEventHandler)()
  spec.csharp:
  - uid: WeihanLi.Common.Event.IEventStore.AddSubscription``2
    name: AddSubscription<TEvent, TEventHandler>
    nameWithType: IEventStore.AddSubscription<TEvent, TEventHandler>
    fullName: WeihanLi.Common.Event.IEventStore.AddSubscription<TEvent, TEventHandler>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WeihanLi.Common.Event.IEventStore.AddSubscription``2
    name: AddSubscription(Of TEvent, TEventHandler)
    nameWithType: IEventStore.AddSubscription(Of TEvent, TEventHandler)
    fullName: WeihanLi.Common.Event.IEventStore.AddSubscription(Of TEvent, TEventHandler)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.EventStoreInRedis.Clear*
  commentId: Overload:WeihanLi.Redis.EventStoreInRedis.Clear
  name: Clear
  nameWithType: EventStoreInRedis.Clear
  fullName: WeihanLi.Redis.EventStoreInRedis.Clear
- uid: WeihanLi.Common.Event.IEventStore.Clear
  commentId: M:WeihanLi.Common.Event.IEventStore.Clear
  parent: WeihanLi.Common.Event.IEventStore
  isExternal: true
  name: Clear()
  nameWithType: IEventStore.Clear()
  fullName: WeihanLi.Common.Event.IEventStore.Clear()
  spec.csharp:
  - uid: WeihanLi.Common.Event.IEventStore.Clear
    name: Clear
    nameWithType: IEventStore.Clear
    fullName: WeihanLi.Common.Event.IEventStore.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WeihanLi.Common.Event.IEventStore.Clear
    name: Clear
    nameWithType: IEventStore.Clear
    fullName: WeihanLi.Common.Event.IEventStore.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes*
  commentId: Overload:WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes
  name: GetEventHandlerTypes
  nameWithType: EventStoreInRedis.GetEventHandlerTypes
  fullName: WeihanLi.Redis.EventStoreInRedis.GetEventHandlerTypes
- uid: WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes``1
  commentId: M:WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes``1
  parent: WeihanLi.Common.Event.IEventStore
  isExternal: true
  name: GetEventHandlerTypes<TEvent>()
  nameWithType: IEventStore.GetEventHandlerTypes<TEvent>()
  fullName: WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes<TEvent>()
  nameWithType.vb: IEventStore.GetEventHandlerTypes(Of TEvent)()
  fullName.vb: WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes(Of TEvent)()
  name.vb: GetEventHandlerTypes(Of TEvent)()
  spec.csharp:
  - uid: WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes``1
    name: GetEventHandlerTypes<TEvent>
    nameWithType: IEventStore.GetEventHandlerTypes<TEvent>
    fullName: WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes<TEvent>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes``1
    name: GetEventHandlerTypes(Of TEvent)
    nameWithType: IEventStore.GetEventHandlerTypes(Of TEvent)
    fullName: WeihanLi.Common.Event.IEventStore.GetEventHandlerTypes(Of TEvent)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Type}
  commentId: T:System.Collections.Generic.ICollection{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Type>
  nameWithType: ICollection<Type>
  fullName: System.Collections.Generic.ICollection<System.Type>
  nameWithType.vb: ICollection(Of Type)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Type)
  name.vb: ICollection(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: WeihanLi.Redis.EventStoreInRedis.GetEventKey*
  commentId: Overload:WeihanLi.Redis.EventStoreInRedis.GetEventKey
  name: GetEventKey
  nameWithType: EventStoreInRedis.GetEventKey
  fullName: WeihanLi.Redis.EventStoreInRedis.GetEventKey
- uid: WeihanLi.Common.Event.IEventStore.GetEventKey``1
  commentId: M:WeihanLi.Common.Event.IEventStore.GetEventKey``1
  parent: WeihanLi.Common.Event.IEventStore
  isExternal: true
  name: GetEventKey<TEvent>()
  nameWithType: IEventStore.GetEventKey<TEvent>()
  fullName: WeihanLi.Common.Event.IEventStore.GetEventKey<TEvent>()
  nameWithType.vb: IEventStore.GetEventKey(Of TEvent)()
  fullName.vb: WeihanLi.Common.Event.IEventStore.GetEventKey(Of TEvent)()
  name.vb: GetEventKey(Of TEvent)()
  spec.csharp:
  - uid: WeihanLi.Common.Event.IEventStore.GetEventKey``1
    name: GetEventKey<TEvent>
    nameWithType: IEventStore.GetEventKey<TEvent>
    fullName: WeihanLi.Common.Event.IEventStore.GetEventKey<TEvent>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WeihanLi.Common.Event.IEventStore.GetEventKey``1
    name: GetEventKey(Of TEvent)
    nameWithType: IEventStore.GetEventKey(Of TEvent)
    fullName: WeihanLi.Common.Event.IEventStore.GetEventKey(Of TEvent)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent*
  commentId: Overload:WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent
  name: HasSubscriptionsForEvent
  nameWithType: EventStoreInRedis.HasSubscriptionsForEvent
  fullName: WeihanLi.Redis.EventStoreInRedis.HasSubscriptionsForEvent
- uid: WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent``1
  commentId: M:WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent``1
  parent: WeihanLi.Common.Event.IEventStore
  isExternal: true
  name: HasSubscriptionsForEvent<TEvent>()
  nameWithType: IEventStore.HasSubscriptionsForEvent<TEvent>()
  fullName: WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent<TEvent>()
  nameWithType.vb: IEventStore.HasSubscriptionsForEvent(Of TEvent)()
  fullName.vb: WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent(Of TEvent)()
  name.vb: HasSubscriptionsForEvent(Of TEvent)()
  spec.csharp:
  - uid: WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent``1
    name: HasSubscriptionsForEvent<TEvent>
    nameWithType: IEventStore.HasSubscriptionsForEvent<TEvent>
    fullName: WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent<TEvent>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent``1
    name: HasSubscriptionsForEvent(Of TEvent)
    nameWithType: IEventStore.HasSubscriptionsForEvent(Of TEvent)
    fullName: WeihanLi.Common.Event.IEventStore.HasSubscriptionsForEvent(Of TEvent)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WeihanLi.Redis.EventStoreInRedis.RemoveSubscription*
  commentId: Overload:WeihanLi.Redis.EventStoreInRedis.RemoveSubscription
  name: RemoveSubscription
  nameWithType: EventStoreInRedis.RemoveSubscription
  fullName: WeihanLi.Redis.EventStoreInRedis.RemoveSubscription
- uid: WeihanLi.Common.Event.IEventStore.RemoveSubscription``2
  commentId: M:WeihanLi.Common.Event.IEventStore.RemoveSubscription``2
  parent: WeihanLi.Common.Event.IEventStore
  isExternal: true
  name: RemoveSubscription<TEvent, TEventHandler>()
  nameWithType: IEventStore.RemoveSubscription<TEvent, TEventHandler>()
  fullName: WeihanLi.Common.Event.IEventStore.RemoveSubscription<TEvent, TEventHandler>()
  nameWithType.vb: IEventStore.RemoveSubscription(Of TEvent, TEventHandler)()
  fullName.vb: WeihanLi.Common.Event.IEventStore.RemoveSubscription(Of TEvent, TEventHandler)()
  name.vb: RemoveSubscription(Of TEvent, TEventHandler)()
  spec.csharp:
  - uid: WeihanLi.Common.Event.IEventStore.RemoveSubscription``2
    name: RemoveSubscription<TEvent, TEventHandler>
    nameWithType: IEventStore.RemoveSubscription<TEvent, TEventHandler>
    fullName: WeihanLi.Common.Event.IEventStore.RemoveSubscription<TEvent, TEventHandler>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WeihanLi.Common.Event.IEventStore.RemoveSubscription``2
    name: RemoveSubscription(Of TEvent, TEventHandler)
    nameWithType: IEventStore.RemoveSubscription(Of TEvent, TEventHandler)
    fullName: WeihanLi.Common.Event.IEventStore.RemoveSubscription(Of TEvent, TEventHandler)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
